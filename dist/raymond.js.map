{"version":3,"file":"raymond.js","sources":["../bower_components/almond/almond.js","../bower_components/gl-matrix/dist/gl-matrix.js","program.js","scene_node.js","texture.js","light.js","material.js","vbo.js","stage.js","mesh.js","Config.js","../bower_components/requirejs-hogan-plugin/hogan.js","../bower_components/requirejs-hogan-plugin/text.js","../bower_components/requirejs-hogan-plugin/hgn.js","../shaders/pathtracing.vert!hgn","../shaders/pathtracing.frag!hgn","../shaders/texture.vert!hgn","scene.js","animation.js","scene_explorer.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","_global","shim","window","GLMAT_EPSILON","GLMAT_ARRAY_TYPE","Float32Array","Array","GLMAT_RANDOM","Math","random","glMatrix","setMatrixArrayType","type","degree","PI","toRadian","a","vec2","create","out","clone","fromValues","x","y","copy","set","add","b","subtract","sub","multiply","mul","divide","div","min","max","scale","scaleAndAdd","distance","sqrt","dist","squaredDistance","sqrDist","len","squaredLength","sqrLen","negate","dot","cross","z","lerp","t","ax","ay","r","cos","sin","transformMat2","m","transformMat2d","transformMat3","transformMat4","forEach","vec","stride","offset","count","fn","arg","l","str","vec3","az","bx","by","bz","zScale","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","rotateX","c","rotateY","rotateZ","vec4","w","aw","mat2","identity","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","b0","b1","b2","b3","rotate","rad","s","v","v0","v1","frob","pow","LDU","L","D","U","mat2d","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","mat3","fromMat4","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","fromMat2d","fromQuat","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","mat4","axis","abs","fromRotationTranslation","xy","xz","yz","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","quat","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","setAxisAngle","setAxes","matr","view","fromMat3","bw","calculateW","slerp","omega","cosom","sinom","scale0","scale1","acos","invDot","conjugate","fRoot","fTrace","k","this","log","_currentProgramList","checkCompilationStatus","gl","shader","compiled","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","Program","vertexShaderSource","fragmentShaderSource","glProgram","createProgram","vshader","createShader","VERTEX_SHADER","shaderSource","compileShader","attachShader","fshader","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","use","useProgram","getAttribLocation","glRenderContext","glProgramObject","setUniform","showWarning","location","getUniformLocation","uniformMatrix4fv","uniformMatrix3fv","uniformMatrix2fv","uniform4fv","uniform3fv","uniform2fv","uniform1f","uniform1i","setTexture","uniformName","textureUnit","texture","isLoaded","MAX_COMBINED_TEXTURE_IMAGE_UNITS","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","glTextureObject","glmatrix","SceneNode","objects","program","transform","visible","drawableObjects","transformation","draw","modelViewMatrix","newProgram","newMatrix","normalMatrix","addObjects","o","removeObjects","idx","Custom","drawFunc","_numTexturesToBeLoaded","onAllTexturesLoaded","callbackFunc","_allTexturesLoadedCallback","Texture2D","useMipMap","gltex","createTexture","resetTexParameters","init_1","filename","loadingCompleted","_image","Image","_texture","onload","handleLoadedImage","src","init_2","width","height","aData","texImage2D","RGB","UNSIGNED_BYTE","generateMipmap","pixelStorei","UNPACK_FLIP_Y_WEBGL","texParameteri","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","setTexParameter","param","image","TextureCube","LIGHT_DIRECTIONAL","DirectionalLight","direction","color","on","mvMatrix","toInverseMat3","dir","multiplyVec3","PhongMaterial","ambient","diffuse","specular","shininess","vbo","Attribute","numComponents","dataType","FLOAT","warnUnused","data","numVert","glBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","bind","attribName","vertexAttribPointer","enableVertexAttribArray","numVertices","Indices","indices","numElements","Uint16Array","ELEMENT_ARRAY_BUFFER","numIndices","Stage","coords","texCoords","coordsBuffer","texCoordsBuffer","drawArrays","TRIANGLE_STRIP","String","startsWith","Mesh","objectData","verts","vertNormals","textures","packed","norms","hashindices","lines","line","quad","face","vertices","vertexNormals","MESH_SAMPLER_WIDTH","MESH_SAMPLER_HEIGHT","Config","get","Hogan","useArrayBuffer","findInScope","key","scope","doModelGet","val","createSpecializedPartial","instance","subs","partials","childText","PartialTemplate","Substitutions","partial","subsText","ib","coerceToString","hoganEscape","hChars","rAmp","rLt","rGt","rApos","rQuot","Template","codeObj","text","compiler","options","code","render","context","indent","ri","ep","symbol","template","base","compile","activeSub","stackText","rp","rs","section","tail","isArray","pop","ctx","inverted","start","end","tags","pass","ms","d","returnFound","found","names","modelGet","cx","mv","ls","func","oldTags","delimiters","ct","disableLambda","buf","fl","textSource","result","toString","cleanTripleStache","token","substr","trim","tagChange","tag","buildTree","tokens","kind","stack","customTags","instructions","opener","shift","allowedInSuper","isOpener","nodes","isCloser","last","close","open","stringifySubstitutions","items","esc","stringifyPartials","rSlash","rNewline","rCr","chooseMethod","createPartial","node","sym","serialNo","tripleStache","write","rIsWhitespace","#","^","<","$","/","!",">","=","_v","{","&","_t","scan","addBuf","lineIsWhitespace","isAllWhitespace","lineStart","match","filterLine","haveSeenTag","noNewLine","next","seenTag","changeDelimiters","ctag","closeIndex","otag","IN_TEXT","IN_TAG_TYPE","IN_TAG","state","tagType","\n","stringify","wrapMain","generate","tree","walk","asString","makeTemplate","makePartials","Function","codegen","inPartial","nodelist","parse","sectionTags","cache","cacheKey","fs","Cc","Ci","xpcIsWindows","progIds","xmlRegExp","bodyRegExp","hasLocation","href","defaultProtocol","protocol","defaultHostName","hostname","defaultPort","port","buildMap","masterConfig","version","strip","content","matches","jsEscape","createXhr","xhr","progId","XMLHttpRequest","ActiveXObject","parseName","modName","ext","temp","isRelative","moduleName","xdRegExp","useXhr","url","uProtocol","uHostName","uPort","exec","toLowerCase","finishLoad","onLoad","isBuild","inlineText","parsed","nonStripName","toUrl","err","pluginName","asModule","writeFile","extPart","fileName","textWrite","contents","env","process","versions","nodeRequire","errback","file","readFileSync","headers","header","setRequestHeader","onXhr","onreadystatechange","status","readyState","responseText","onXhrComplete","send","Packages","java","stringBuffer","encoding","io","File","lineSeparator","lang","System","getProperty","input","BufferedReader","InputStreamReader","FileInputStream","StringBuffer","readLine","append","Components","classes","interfaces","utils","inStream","convertStream","fileObj","readData","FileUtils","createInstance","nsIFileInputStream","init","nsIConverterInputStream","available","DEFAULT_REPLACEMENT_CHARACTER","readString","path","hogan","hgnConfig","hgn","templateExtension","DEFAULT_EXTENSION","compilationOptions","mixIn","_buildMap","target","source","writeModule","_buildTemplate","_buildTemplateText","tmpl","Texture","light","material","pathtracingVert","pathtracingFrag","textureVert","textureFrag","setUniformScene","prog","meshToUint8Array","mesh","samplerWidth","samplerHeight","res","Uint8Array","Scene","canvas","document","getElementById","innerHTML","meshData","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","swapTexture","meshTexture","NEAREST","framebufferTexture2D","COLOR_ATTACHMENT0","camera","viewMatrix","projectionMatrix","prog_pathtracing","hasSpheres","numberOfSpheres","numberOfSphericalLights","hasCornellBox","hasMesh","meshSamplerWidth","prog_texture","stage","stageNode","world","sampleCounter","msSinceStart","modelView","enable","DEPTH_TEST","depthFunc","LESS","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","cancelRequestAnimFrame","cancelCancelRequestAnimationFrame","webkitCancelRequestAnimationFrame","mozCancelRequestAnimationFrame","oCancelRequestAnimationFrame","msCancelRequestAnimationFrame","clearTimeout","Animation","updateFunction","startNow","firstTime","lastTime","waitingTime","stop","isRunning","isStopped","update","resume","Date","getTime","delta","toggleAnimation","timeNow","totalTime","timeDelta","_animation","SceneExplorer","triggerRedraw","scene","scene2","dragMode","draggingStarted","startX","startY","KEY_NONE","KEY_SHIFT","KEY_ALT","KEY_CTRL","KEY_META","KEY_ALL","activeModifierKeys","rotSensitivity","zoomSensitivity","transSensitivity","attachToCanvas","startDragging","dragType","stopDragging","continueDragging","deltaX","deltaY","degreesY","degreesX","xAxis","yAxis","eyeToModel","rotX","rotY","trans","redraw","_explorer","mouseDown","event","exp","button","which","clientX","clientY","mouseUp","mouseMove","keyDown","shiftKey","ctrlKey","altKey","metaKey","keyUp","onmousedown","onmouseup","onmousemove","onkeydown","onkeyup","Raymond","animation","drawFirstFrame"],"mappings":"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","sourcesContent":["/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../bower_components/almond/almond\", function(){});\n\n","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.2.1\n */\n\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n\n(function(_global) {\n  \"use strict\";\n\n  var shim = {};\n  if (typeof(exports) === 'undefined') {\n    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n      shim.exports = {};\n      define('gl-matrix',[],function() {\n        return shim.exports;\n      });\n    } else {\n      // gl-matrix lives in a browser, define its namespaces in global\n      shim.exports = typeof(window) !== 'undefined' ? window : _global;\n    }\n  }\n  else {\n    // gl-matrix lives in commonjs, define its namespaces in exports\n    shim.exports = exports;\n  }\n\n  (function(exports) {\n    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n\nif(!GLMAT_EPSILON) {\n    var GLMAT_EPSILON = 0.000001;\n}\n\nif(!GLMAT_ARRAY_TYPE) {\n    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\n}\n\nif(!GLMAT_RANDOM) {\n    var GLMAT_RANDOM = Math.random;\n}\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n/**\n * Sets the type of array used when creating new vectors and matricies\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    GLMAT_ARRAY_TYPE = type;\n}\n\nif(typeof(exports) !== 'undefined') {\n    exports.glMatrix = glMatrix;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\n\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new GLMAT_ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = GLMAT_RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.vec2 = vec2;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\n\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = GLMAT_RANDOM() * 2.0 * Math.PI;\n    var z = (GLMAT_RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/*\n* Rotate a 3D vector around the x-axis\n* @param {vec3} out The receiving vec3\n* @param {vec3} a The vec3 point to rotate\n* @param {vec3} b The origin of the rotation\n* @param {Number} c The angle of rotation\n* @returns {vec3} out\n*/\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/*\n* Rotate a 3D vector around the y-axis\n* @param {vec3} out The receiving vec3\n* @param {vec3} a The vec3 point to rotate\n* @param {vec3} b The origin of the rotation\n* @param {Number} c The angle of rotation\n* @returns {vec3} out\n*/\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/*\n* Rotate a 3D vector around the z-axis\n* @param {vec3} out The receiving vec3\n* @param {vec3} a The vec3 point to rotate\n* @param {vec3} b The origin of the rotation\n* @param {Number} c The angle of rotation\n* @returns {vec3} out\n*/\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.vec3 = vec3;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\n\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n        out[3] = a[3] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = GLMAT_RANDOM();\n    out[1] = GLMAT_RANDOM();\n    out[2] = GLMAT_RANDOM();\n    out[3] = GLMAT_RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.vec4 = vec4;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\n\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\nif(typeof(exports) !== 'undefined') {\n    exports.mat2 = mat2;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\nif(typeof(exports) !== 'undefined') {\n    exports.mat2d = mat2d;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\n\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n\nif(typeof(exports) !== 'undefined') {\n    exports.mat3 = mat3;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\n\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < GLMAT_EPSILON) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    \n    return out;\n};\n\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&\n        Math.abs(eyey - centery) < GLMAT_EPSILON &&\n        Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + \n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n\nif(typeof(exports) !== 'undefined') {\n    exports.mat4 = mat4;\n}\n;\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation \n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\n/**\n * @class Quaternion\n * @name quat\n */\n\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[7]-m[5])*fRoot;\n        out[1] = (m[2]-m[6])*fRoot;\n        out[2] = (m[3]-m[1])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[k*3+j] - m[j*3+k]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\nif(typeof(exports) !== 'undefined') {\n    exports.quat = quat;\n}\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n  })(shim.exports);\n})(this);\n\n","/*\n * WebGL core teaching framwork \n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: Program\n *\n * A Program encapsulates a WebGL program object and has methods\n * to create the program from shader source code, enable the program,\n * query for attribute locations, and set attributes.\n *\n * Method Overview:\n * - use()              : makes this the active program\n * - getAttribLocation(): returns the \"handle\" for a named attribute\n * - setUniform()       : define the value of a uniform shader variable\n * - setTexture()       : define a texture to be used in the shaders\n * - glRenderContext()  : returns associated (native) WebGL rendering context\n * - glProgram()        : returns associated (native) WebGL program object\n *\n */\n\n\n/* requireJS module definition */\ndefine('program',[\n], function() {\n       \n    \"use strict\";\n    \n    /* \n     * \"private static\" variable within this module, keeping track of the currently active program\n     * for each rendering context\n     *\n     */\n    log(\"executing module program.js\");\n    var _currentProgramList = [];\n    \n    /* private function to check compilation status */\n    var checkCompilationStatus = function(gl, shader, name) {\n    \n        var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        \n        if (!compiled) {\n            // Something went wrong during compilation; get the error\n            var error = gl.getShaderInfoLog(shader);\n            throw name + \": \" + error;\n            gl.deleteShader(shader);\n            return false;\n        };\n        return true;\n    };\n \n    /* \n\n        Object: Program\n        The program holds a set of compiled shaders. During rendering of a scene,\n        it is possible to switch between programs by calling their\n        respective use() methods. The program is associated with a \n        specific rendering context.\n       \n        Parameters to the constructor function:\n        - progName             : string containing the name of the program for UI purposes\n        - gl                   : WebGL rendering context created via initWebGL()\n        - vertexShaderSource   : string containing source code of the vertex shader. \n        - fragmentShaderSource : string containing source code of the fragment shader. \n         \n       \n    */ \n\n    var Program = function(gl, vertexShaderSource, fragmentShaderSource) {\n\n        // store associated WebGL rendering context\n        this.gl = gl;\n\n        // create a new WebGL program object\n        this.glProgram = gl.createProgram();\n        \n        // compile and attach vertex shader\n        var vshader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vshader, vertexShaderSource);\n        gl.compileShader(vshader);\n        if(!checkCompilationStatus(gl, vshader,\"vertex shader\")) {\n            return null;\n        };\n        gl.attachShader(this.glProgram, vshader);\n\n        // compile and attach fragment shader\n        var fshader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fshader, fragmentShaderSource);\n        gl.compileShader(fshader);\n        if(!checkCompilationStatus(gl, fshader,\"fragment shader\")) {\n            return null;\n        }\n        gl.attachShader(this.glProgram, fshader);\n\n        // link the program so it can be used\n        gl.linkProgram(this.glProgram);\n        \n        // check for linking errors\n        \n        if (!gl.getProgramParameter(this.glProgram, gl.LINK_STATUS)) {\n            throw \"linking error: \" + gl.getProgramInfoLog(this.glProgram);\n            return null;\n        }\n\n    }; \n\n    /* \n     * method use(): switch between WebGL programs, activate this program. \n     * Please note that for performance reasons, the program will only\n     * be switched if it is not already the active program.\n     *\n     */\n    Program.prototype.use = function() {\n    \n        if(_currentProgramList[this.gl] === this) {\n            // do nothing because a gl.useProgram() is expensive!!!\n        } else {\n            this.gl.useProgram(this.glProgram);\n            _currentProgramList[this.gl] = this;\n        };\n        \n    };\n    \n    /* \n     * method getAttributeLocation() is a wrapper for the WebGL getAttributeLocation. \n     *\n     */\n    Program.prototype.getAttribLocation = function(name) {\n    \n        return this.gl.getAttribLocation(this.glProgram, name);\n        \n    };\n\n    \n    /* method: return WebGL rendering context */\n    Program.prototype.glRenderContext = function() {\n        return this.gl;\n    };\n    \n    /* method: return WebGL program object */\n    Program.prototype.glProgramObject = function() {\n        return this.glProgram;\n    };\n\n    /*\n        method: Set the value of a uniform variable in a WebGL shader.\n   \n        parameters:\n        - name [string]: the name of the uniform variable as it appears\n          in the shader source code\n        - type [string]: \"float\", \"vec3\", \"vec4\", \"mat3\", \"mat4\"\n        - value [any type]: the actual value of the variable, with a type\n          matching the respective WebGL type\n     \n        return Value:\n        - true if the uniform was set successfully, else false.\n    */\n\n    Program.prototype.setUniform = function(name, type, value, showWarning) {\n    \n        if(showWarning === undefined) {\n            showWarning = true;\n        };\n\n        // get the location of the uniform within the program object\n        var location = this.gl.getUniformLocation(this.glProgram, name);\n        if(location == null) {\n            if(showWarning) {\n                log(\"WARNING: uniform variable \" + name + \" not used in shader.\");\n            };\n        } else {\n        \n            switch(type) {\n                case \"mat4\":\n                    this.gl.uniformMatrix4fv(location, false, value);\n                    return true;\n                case \"mat3\":\n                    this.gl.uniformMatrix3fv(location, false, value);\n                    return true;\n                case \"mat2\":\n                    this.gl.uniformMatrix2fv(location, false, value);\n                    return true;\n                case \"vec4\":\n                    this.gl.uniform4fv(location, value);\n                    return true;\n                case \"vec3\":\n                    this.gl.uniform3fv(location, value);\n                    return true;\n                case \"vec2\":\n                    this.gl.uniform2fv(location, value);\n                    return true;\n                case \"float\":\n                    this.gl.uniform1f(location, value);\n                    return true;\n                case \"int\":\n                    this.gl.uniform1i(location, value);\n                    return true;\n                case \"bool\": // bool is transferred as integer!\n                    this.gl.uniform1i(location, value);\n                    return true;\n                default: \n                    throw new Error(\"setUniform(): unknown uniform type '\"+type+\"'\");\n                    return false;\n            }; // end switch\n            \n        }; // end else\n    \n        return false;\n        \n    }; // end setUniform()\n    \n    /* \n        method setTexture(): bind a texture to a name and a texture unit in this program \n        parameters: \n        - uniformName: a string containing the name of the uniform variable in the shader\n        - textureUnit: an integer specifying which texture unit shall be used\n        - texture:     a wrapper object for a WebGL texture (specifics see below)\n        - showWarning: optional flag whether to show warnings or not (default: true)\n        \n        the texture object must be a wrapper for a WebGL texture providing \n        the following two methods:\n        - isLoaded() returns true if the associated image data has already been loaded\n        - glTextureObject() returns the associated native WebGL texture object\n    */\n    Program.prototype.setTexture = function(uniformName, textureUnit, texture, showWarning) {\n    \n        // by default, show warnings\n        if(showWarning === undefined) {\n            showWarning = true;\n        };\n\n        // does the texture object have an isLoaded() method?\n        if( !texture.isLoaded ) {\n            throw new Error(\"setTexture(): not a valid texture wrapper object.\");\n            return false; \n        };\n        \n        // has the texture already been loaded?\n        if( !texture.isLoaded() ) {\n            log(\"info: image file for texture \"+uniformName+\" not loaded yet.\");\n            return false;\n        };\n\n        // is the desired texture unit within the allowed range?\n        var max = this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n        if(textureUnit < 0 || textureUnit >= max) {\n            throw new Error(\"ERROR: setTexture(): texture unit \" + textureUnit +\n                       \" out of range [0 ... \" + max-1 + \"]\");\n            return false;\n        };\n        \n        // find location of texture's uniform variable\n        var location = this.gl.getUniformLocation(this.glProgram, uniformName);\n        if(location === null || location < 0) {\n            log(\"uniform sampler \" + uniformName + \" not used in shader.\");\n            return;\n        };\n        \n        // log(\"using texture unit \"+textureUnit+\" for sampler \"+samplerName);\n\n        // bind the texture unit to the sampler's location/name\n        this.gl.uniform1i(location, textureUnit);\n\n        // activate the right texture unit\n        this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);\n        \n        // bind the actual texture object to the texture unit\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture.glTextureObject());\n      \n    }; // setTexture()\n                             \n    // this module only returns the Program constructor function    \n    return Program;\n\n}); // define\n\n    \n;\n","/*\n * JavaScript / Canvas teaching framwork \n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: SceneNode \n *\n * A SceneNode is a container for a transformation, a program, \n * and a list of drawable objects.\n *\n * The drawable objects can themselves be SceneNodes, so that \n * hierarchical modeling is supported.\n *\n * The node has a public attribute \"visible\" that determines whether\n * the node and its children will actually be drawn or not.\n *\n * The program and the transformation are optional; however \n * at a minimum you must specify a program for the root node. \n *\n * - the transformation associated with the node can be  \n *   accessed directly via the attribute \"transformation\".\n *\n * - the program associated with the node can be accessed \n *   directly via the attribute \"program\".\n *\n * - drawable objects can be added via the addObjects() method,\n *   and can be removed again using the removeObjects() method.\n *\n * - the draw() method \n *   - multiplies the model-view matrix passed as an argument \n *     with its own model-view matrix from the right\n *   - for each drawable object it refers to:\n *     - activates the program to be used\n *       (either the node's own program, or if that is not\n *       defined, the program passed as an argument)\n *     - sets the uniform \"modelViewMAtrix\" in the active program\n *     - calls the object's draw() method using the current\n *       program and matrix\n *\n * The SceneNode also allows to easily create custom SceneNode objects\n * that consist simply of a custom draw() method. Example:\n *\n * var SceneNode = new SceneNode();\n * var clear = new SceneNode.Custom((function(gl,program,mvMatrix) {\n *      gl.clearColor(0,0,0,1);\n *      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n * }));\n * ... \n * SceneNode.addObjects([clear,...]);\n * SceneNode.draw(gl,program);\n */\n\n\n\n/* requireJS module definition */\ndefine('scene_node',[\n    \"gl-matrix\"\n], function(glmatrix) {\n\n    \"use strict\";\n    \n    /* \n     * SceneNode constructor\n     * A SceneNode holds a collection of things to be drawn, \n     * plus an associated transformation and program (both optional).\n     *\n     * The constructor takes the following arguments:\n     * - name      : string defining the name of the SceneNode for UI/debugging purposes,\n     * - objects   : array of objects to be contained in this SceneNode \n     * - program   : a Program object (see program.js)\n     * - transform : local transformation matrix (of type mat4, see lib/gl-matrix.js)\n     *  \n     */ \n    var SceneNode = function(name, objects, program, transform, visible) {\n    \n        // name for UI / debugging\n        this.name = name;\n        \n        // optional list of objects contained in this node\n        this.drawableObjects = objects || [];\n        \n        // optional GPU program for this node\n        this.program         = program || null;\n\n        // optional transformation for this node\n        this.transformation  = transform || glmatrix.mat4.create();\n        \n        // flag: draw this node and its children, or not?\n        this.visible = visible===undefined? true : visible;\n        \n        log(\"created \" + (visible? \"invisible \" : \"\") + \"node \" + this.name +\n                           \" with \" + this.drawableObjects.length + \" children.\");\n        \n    };\n    \n    \n    /*\n     * draw() simply calls the draw() method of each object,\n     * in the order they were added to the SceneNode. Before that,\n     * the SceneNode node's own model-view matrix is chained  \n     * with the model-view matrix passed as an argument,\n     * and the shader variable \"modelViewMatrix\" is set;\n     * also the inverse-transpose of MV-Matrix is calculated and\n     * set as the shader variable \"normalMatrix\".  \n     * - gl              : the WebGL rendering context \n     * - progam          : the (WebGL) Program to be used\n     * - modelViewMatrix : the current modelview matrix \n     */\n    SceneNode.prototype.draw = function(gl, program, modelViewMatrix) {\n\n        if(!this.visible) \n            return;\n\n        if(!gl) {\n            throw \"no WebGL context specified in scene node \" + this.name;\n        }\n    \n        // take program passed as a parameter, or the program from the constructor\n        var newProgram = this.program || program;\n        if(!newProgram) {\n            throw \"no program specified in scene node \" + this.name;\n        }\n\n        // copy the matrix passed as a parameter, or identity if undefined\n        var newMatrix = modelViewMatrix ? glmatrix.mat4.clone(modelViewMatrix) : glmatrix.mat4.create();\n        \n        // multiply the local transformation from the right so it will be executed FIRST\n        glmatrix.mat4.multiply(newMatrix, newMatrix, this.transformation);\n        \n        // calculate the normal matrix\n        var normalMatrix =  glmatrix.mat3.fromMat4(glmatrix.mat3.create(),\n            glmatrix.mat4.invert(glmatrix.mat4.create(), newMatrix) // copy\n        );\n        glmatrix.mat3.transpose(normalMatrix,normalMatrix);\n    \n        // loop over all drawable objects and call their draw() methods\n        for(var i=0; i<this.drawableObjects.length; ++i) {\n            // set new program and new model view matrix for each child\n            newProgram.use();\n            newProgram.setUniform(\"modelViewMatrix\", \"mat4\", newMatrix);\n            newProgram.setUniform(\"normalMatrix\",    \"mat3\", normalMatrix, false);\n\n            // child may manipulate the program and/or matrix!\n            this.drawableObjects[i].draw(gl, newProgram, newMatrix);\n        }\n        \n    };\n    \n    /* \n     * add multiple objects to the SceneNode, in drawing order\n     * - objects: ARRAY of objects to be added\n     */\n    SceneNode.prototype.addObjects = function(objects) {\n\n        for(var i=0; i<objects.length; i++) {\n            var o = objects[i];\n            if(!o.draw) {\n                throw \"addObjects(): object \" + i + \" has no draw() method.\";\n            } else {\n                this.drawableObjects.push(o);\n            }\n            \n        }\n        log(\"added \" + objects.length + \" objects to SceneNode \" + this.name + \".\");\n            \n    };\n    \n    /*\n     * remove drawable objects from the SceneNode (provided in an array)\n     */\n    SceneNode.prototype.removeObjects = function(objects) {\n\n        for(var i=0; i<objects.length; i++) {\n            // find obj in array\n            var idx = this.drawableObjects.indexOf(objects[i]); \n            if(idx === -1) {\n                // log(\"warning: SceneNode.remove(): object not found.\");\n            } else {\n                // remove obj from array\n                this.drawableObjects.splice(idx,1);\n            }\n        }\n            \n    };\n\n\n    /* Allow to easily create a custom SceneNode object\n     * that consists simply of a user-provided draw() method.\n     * thie drawFunc must should take up to three parameters:\n     * gl, program, and mvMatrix [ see SceneNode.draw() ]\n     */\n    SceneNode.prototype.Custom = function(drawFunc) { \n        this.draw = drawFunc;\n    };\n    \n    \n    // this module only exports the constructor for SceneNode objects\n    return SceneNode;\n\n}); // define\n\n    \n;\n","/*\n * WebGL core teaching framwork \n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: Texture\n *\n * This module provides methods to load and create textures from \n * image files.\n *\n * // Create/Load a 2D texture:\n * var tex = new texture.2D(gl, \"textures/myfile.gif\");\n *\n * // Create/Load a cube texture from 6 individual texture files\n * // cube_textures/{posx.png,negx.png,posy.png,negy.png,posz.png,negz.png}\n * var tex = new texture.Cube(gl, \"cube_textures\", \"png\");\n *\n * // check whether it has been loaded yet\n * if(tex.isLoaded()) {\n *  . . . \n * }\n * \n * // use the texture for the sampler2D shader variable \"myTex\" \n * // in texture unit 0\n * program.setTexture(\"myTex\", 0, tex);\n * \n * // call some function after *all* textures have been loaded:\n * texture.onAllTexturesLoaded( (function() { … start drawing … }) );\n *\n */\n\n/* requireJS module definition */\ndefine('texture',[\n], function() {\n\n    \"use strict\";\n    \n    \n    /* \"global\" counter counting how many texture are to be loaded */\n    var _numTexturesToBeLoaded = 0;\n    \n    /* function to set up an event handler once all textures have been loaded */\n    var onAllTexturesLoaded = function(callbackFunc) {\n        _allTexturesLoadedCallback = callbackFunc;\n    };\n\n    /**\n     * Object: 2D Texture\n     *\n     * Parameters to the constructor:\n     * @param gl        WebGL context object\n     * @param useMipMap whether or not to use an automatic Mip-Map\n     * @param callback  (optional) function to be called after texture is loaded\n     * @constructor\n     * @author Hartmut Schirmacher, hschirmacher.beuth-hochschule.de\n     * @author Niels Garve, niels.garve.yahoo.de\n     *\n     * TODO: global counter and callback once ALL requested textures have been loaded\n     */\n    var Texture2D = function (gl, useMipMap, callback) {\n        // store configuration parameters\n        this.gl = gl;\n        this.useMipMap = useMipMap === undefined ? false : useMipMap;\n        this.callback = callback;\n\n        // create a WebGL texture object\n        this.gltex = gl.createTexture();\n        if (!this.gltex) {\n            throw \"could not create WebGL texture\";\n        }\n\n        // default texture parameters\n        this.resetTexParameters();\n    };\n\n    /**\n     * multiple constructors by chaining the new call\n     *\n     * @param filename  name of the image file holding the texture\n     * @return {Texture2D}\n     * @constructor\n     * @author Hartmut Schirmacher, hschirmacher.beuth-hochschule.de\n     * @author Niels Garve, niels.garve.yahoo.de\n     */\n    Texture2D.prototype.init_1 = function (filename) {\n        // flag indicating whether loading has been completed\n        this.loadingCompleted = false;\n\n        // increase global counter\n        _numTexturesToBeLoaded++;\n\n        // the image object including the file name\n        var _image = new Image(),\n            _texture = this;\n\n        // event handler to set up the texture once it is loaded\n        _image.onload = function () {\n            _texture.handleLoadedImage(_image);\n        };\n\n        // file to be loaded - now loading will start asynchronously\n        _image.src = filename;\n\n        return this;\n    };\n\n    /**\n     * multiple constructors by chaining the new call\n     *\n     * @param width\n     * @param height\n     * @param aData\n     * @return {Texture2D}\n     * @constructor\n     * @author Niels Garve, niels.garve.yahoo.de\n     */\n    Texture2D.prototype.init_2 = function (width, height, aData) {\n        // shortcut\n        var gl = this.gl;\n\n        // mark texture as loaded\n        this.loadingCompleted = true;\n\n        gl.bindTexture(gl.TEXTURE_2D, this.gltex);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, width, height, 0, gl.RGB, gl.UNSIGNED_BYTE, aData);\n\n        // now is the right time to generate a MIP-MAP, if desired\n        if (this.useMipMap) {\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n\n        // trigger the callback if desired\n        if (this.callback) {\n            this.callback();\n        }\n\n        return this;\n    };\n\n    // method to set the default parameters for 2D textures\n    Texture2D.prototype.resetTexParameters = function() {\n    \n        var gl = this.gl;\n        \n        gl.bindTexture(gl.TEXTURE_2D, this.gltex);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    \n        if(this.useMipMap) {    \n            // for using Mip-Mapping, set filters accordingly\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n        } else {\n            // no Mip-Mapping, set filters accordingly\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        };\n    };\n    \n    // method to change a texture parameter\n    Texture2D.prototype.setTexParameter = function(param, value) {\n        var gl = this.gl;\n        gl.bindTexture(gl.TEXTURE_2D, this.gltex);\n        gl.texParameteri(gl.TEXTURE_2D, param, value);\n    };\n    \n    // method to query whether image file has been loaded yet\n    Texture2D.prototype.isLoaded = function() {\n        return this.loadingCompleted;\n    };\n        \n    /* return native WebGL texture object */\n    Texture2D.prototype.glTextureObject = function() {\n        return this.gltex;\n    };\n\n    /* method for use by the loaded image only - is there a better way to do this? */\n    Texture2D.prototype.handleLoadedImage = function(image) {\n\n        var gl = this.gl;\n\n        // mark texture as loaded\n        this.loadingCompleted = true;\n        log(\"texture \" + image.src + \" loaded.\");\n\n        // assign image data \n        gl.bindTexture(gl.TEXTURE_2D, this.gltex);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n        \n        // now is the right time to generate a MIP-MAP, if desired\n        if(this.useMipMap) {\n            gl.generateMipmap(gl.TEXTURE_2D);\n        };\n        \n        // trigger the callback if desired\n        if(this.callback) { this.callback(); }\n        \n        // trigger all-textures-loaded callback if desired\n        _numTexturesToBeLoaded--;\n        if(_numTexturesToBeLoaded == 0) {\n            if(_allTexturesLoadedCallback) {\n                _allTexturesLoadedCallback();\n            };\n        };\n    };\n    \n    // dummy for now\n    var TextureCube = function() {\n        log(\"TextureCube not implemented.\");\n    };\n    \n    /* default callback function to be triggered once all textures have been loaded */\n    var _allTexturesLoadedCallback = function() {\n        log(\"all textures have been loaded\");\n    };\n \n    // this module exports two constructor functions and a \n    return { \"onAllTexturesLoaded\": onAllTexturesLoaded,\n             \"Texture2D\": Texture2D, \n             \"TextureCube\": TextureCube };\n         \n}); // define\n            \n\n;\n","/*\n * WebGL core teaching framwork \n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: Light\n *\n * This module defines different types of light sources.\n *\n */\n\n\n/* requireJS module definition */\ndefine('light',[], \n       ( function() {\n\n    \"use strict\";\n    \n    var LIGHT_DIRECTIONAL = 0;\n    var LIGHT_POINT = 1;\n    var LIGHT_SPOT = 2;\n\n    /* \n        Object: DirectionalLight\n        \n        Sets uniform variables in the shader to define \n        a directional light source.\n        \n        Parameters to the constructor:\n        - uniformName: the name of the uniform struct variable to be used in the shader\n        - config: a configuration object with the following optional parameters:\n          - direction [3 floats]: direction in which the light is travelling\n          - color [3 floats]: light color / intensities (RGB)\n          - on [bool]: light on/off\n        \n        Key Methods:\n        - draw(): sets the uniforms in the shader (does not call any draw command!)\n    */\n        \n    var DirectionalLight = function(uniformName, config) {\n\n        config = config || {};\n        this.uniformName = uniformName      || \"light\"\n        this.direction   = config.direction || [-1,0,0];\n        this.color       = config.color     || [1,0,0];\n        this.on          = config.on        || true;\n        \n    };\n        \n    // transform light direction and set all light struct elements in the shader\n    DirectionalLight.prototype.draw = function(gl, program, mvMatrix) {    \n    \n        // calculate the normal matrix\n        var normalMatrix =  mat4.toInverseMat3(mvMatrix || mat4.identity());\n        mat3.transpose(normalMatrix,normalMatrix);\n\n        // transform light direction vector using normal matrix\n        var dir = vec3.create(this.direction);\n        mat3.multiplyVec3(normalMatrix,dir);\n\n        // set uniforms\n        var name = this.uniformName;\n        program.use();\n        program.setUniform(name + \".type\",      \"int\",  LIGHT_DIRECTIONAL);\n        program.setUniform(name + \".on\",        \"bool\", this.on);\n        program.setUniform(name + \".direction\", \"vec3\", dir);\n        program.setUniform(name + \".color\",     \"vec3\", this.color);\n    };\n    \n    // this module returns constructors for various light types\n    return { \"DirectionalLight\": DirectionalLight };\n\n})); // define module\n        \n\n                                     \n;\n","/*\n * WebGL core teaching framwork \n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: Material\n *\n * This module defines different types of materials for shading.\n *\n */\n\n\n/* requireJS module definition */\ndefine('material',[], \n       ( function() {\n\n    \"use strict\";\n    \n    /* \n        Object: PhongMaterial\n        \n        Sets uniform variables in the shader to define \n        a Phong or Blinn-Phong material.\n        \n        Parameters specified via a config object:\n        - uniformName: the name of the uniform struct to be used in the shader\n        - config: a configuration object defining the following optional attributes:\n          - ambient  [3 floats]: ambient reflection coefficient\n          - diffuse  [3 floats]: diffuse reflection coefficient\n          - specular [3 floats]: specular reflection coefficient\n          - shininess [float]: Phong exponent\n            \n        Key Methods:\n        - draw(): sets uniform variables in the shader\n    */\n        \n    var PhongMaterial = function(uniformName, config) {\n    \n        config = config || {};\n        this.uniformName = uniformName || \"material\";\n        this.ambient   = config.ambient  || [0.0, 0.0, 0.0];\n        this.diffuse   = config.diffuse  || [0.4, 0.0, 0.0];\n        this.specular  = config.specular || [0.6, 0.6, 0.6];\n        this.shininess = config.shininess|| 40;\n        \n    };\n        \n        // activate this light by setting the respective uniform variables\n    PhongMaterial.prototype.draw = function(gl, program, mvMatrix) {\n    \n        var name = this.uniformName;\n\n        program.use();\n        program.setUniform(name+\".ambient\",   \"vec3\",  this.ambient);\n        program.setUniform(name+\".diffuse\",   \"vec3\",  this.diffuse);\n        program.setUniform(name+\".specular\",  \"vec3\",  this.specular);\n        program.setUniform(name+\".shininess\", \"float\", this.shininess);\n\n    };\n    \n    // this module returns constructors for various light types\n    return { \"PhongMaterial\": PhongMaterial };\n\n})); // define module\n        \n\n                                     \n;\n","/*\n *\n * WebGL Core Teaching Framework\n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: VBO (Vertex Buffer Objects)\n *\n * The VBO module simpifies the creation and usage of vertex attribute \n * buffers and index/element buffers. There are two constructors in the\n * interface of this module: vbo.Attribute() and vbo.Indices(). See comments\n * below.\n *\n */\n\n/* requireJS module definition */\ndefine('vbo',[\n], function() {\n\n    \"use strict\";\n    \n    // the interface of this module\n    var vbo = {};\n\n    /* \n\n       Constructor: Attribute\n       Creates a Vertex Buffer Object (VBO) representing a single \n       vertex attribute.\n        \n       Parameters to the constructor:\n       - gl is the WebGL context to be used for drawing\n       - config.numComponents is the number of primitive data elements \n         per attribute, e.g. 3 for a vec3\n       - config.data is the actual data, e.g. a Float32Array for \n         float-typed attributes. If this is a native JavaScript Array, \n         it will be copied and converted to Float32Array.\n       - config.dataType is the primitive data type used (default gl.FLOAT)\n       - config.warnUnused is a flag indicating whether to show a warning if \n         the program does not use this attribute (i.e. wrong shader variable \n         name)\n       \n       Results of the constructor:\n       - creates and returns a wrapper to a WebGL vertex buffer \n         object (VBO) for the specified vertex attribute data\n       - the data from the dataArray will be copied into the VBO \n         residing in graphics (or driver) memory; it is safe to \n         delete the dataArray after the constructor call\n\n       Methods:\n       - bind(gl, program, attribName) binds the VBO to the shader variable\n         given by the string attribName.\n         If another VBO is bound to the same shader variable later,\n         the newer one takes precedence over the older one.\n         \n       Example to create VBO consisting of three floats per vertex, \n       and use it for the attribute \"vertexPosition\" :\n       var coords = [-1,0,0, 1,0,0, 0.5,1,0]; // triangle\n       var buf = new vbo.VertexAttribute(gl, {\"numComponents\": 3, \n                                              \"dataType\": gl.FLOAT,\n                                              \"data\": coords } );       \n       ...\n       buf.bind(gl, program, \"vertexPosition\");\n       ...\n       gl.drawArrays(...);\n       \n    */ \n\n    vbo.Attribute = function(gl, config) {\n\n        // store the parameters as attributes\n        this.numComponents = config.numComponents;\n        this.dataType      = config.dataType || gl.FLOAT;\n        this.warnUnused    = config.warnUnused;\n        if(this.warnUnused === undefined) { this.warnUnused = false; };\n        var data = config.data;\n        \n        // calculate number of vertices from array length\n        this.numVert = data.length / this.numComponents;\n        \n        // convert array to typed array if the user just provided a normal array\n        if(!(data instanceof Float32Array))\n            data = new Float32Array(data);\n\n        // create the WebGL buffer object and copy the data\n        this.glBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n        \n        // \"data\" is no longer used after this.\n        \n    };\n\n    /*\n     * bind() method of Attribute objects \n     * binds the VBO to its respective shader variable\n     */\n    vbo.Attribute.prototype.bind = function(gl, program, attribName) {\n        \n        // get location to which this attribute is bound \n        // in the currently active WebGL program\n        program.use();\n        var location = program.getAttribLocation(attribName);\n        if(location < 0) {\n            if(this.warnUnused) {\n                log(\"vertex attribute \" + attribName +\n                           \" not used in vertex shader.\");\n            }\n            return;\n        }; \n            \n        // bind the buffer object to the current vertex array \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuffer);\n\n        // which part of the buffer is to be used for this object\n        gl.vertexAttribPointer(location, this.numComponents, \n                               this.dataType, false, 0, 0);\n            \n        // enable this array / buffer\n        gl.enableVertexAttribArray(location);\n        \n    };\n    \n    /*\n     * numVertices() method returns number of vertices in the VBO \n     */\n    vbo.Attribute.prototype.numVertices = function() {\n        return this.numVert;\n    };\n\n    /* \n\n       Constructor: Indices\n       Creates a Vertex Buffer Object (VBO) that contains indices pointing\n       to vertices, i.e. for connecting the vertices with lines or triangles.\n        \n       Parameters to the constructor:\n       - gl is the WebGL context to be used for drawing\n       - config.indices: a Uint16Array of indices. If it is a native JavaScript \n         array, it will be copied and converted to a typed array.\n    \n       Methods:\n       - bind() makes this VBO the active element buffer. \n       - numIndices() returns the number of elements/indices in the buffer. \n    */\n    vbo.Indices = function(gl, config) {\n\n        var indices = config.indices;\n        this.numElements = indices.length;\n        \n        // create a WebGL buffer object\n        this.glBuffer = gl.createBuffer();\n        \n        // convert array to Uint16Array if necessary\n        if(! (indices instanceof Uint16Array)) \n            indices = new Uint16Array(indices);\n        \n        // copy the index data over \n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.glBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n        \n    };\n    \n    /*\n     * method numIndices(): return number of indices contained in the VBO\n     */\n    vbo.Indices.prototype.numIndices = function() {\n        return this.numElements;  \n    };\n\n    /*\n     * method bind(): make this VBO the active element buffer \n     */ \n    vbo.Indices.prototype.bind = function(gl) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.glBuffer);\n    };\n\n\n    // this module returns an interface with two constructors\n    return vbo;\n\n}); // end define\n\n            \n;\n","/*\n * WebGL core teaching framwork\n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de\n *\n * Module: Stage\n * (C)opyright Niels Garve, niels.garve@yahoo.de\n *\n * The Stage lies in the X-Y plane and consists of four vertices:\n *\n *              D             C\n *    y         .-------------.\n *    |         |             |\n *    |         |             |\n *    |         |             |\n *    0-----x   |             |\n *   /          |             |\n *  /           |             |\n * z            .-------------.\n *              A             B\n *\n * *\n */\n\n/* requireJS module definition */\ndefine('stage',[\n    \"vbo\"\n], function (vbo) {\n    \"use strict\";\n\n    /**\n     * constructor, takes WebGL context object as argument\n     * @param gl\n     * @constructor\n     */\n    var Stage = function (gl) {\n\n        // generate vertex coordinates and store in an array\n        var coords = [\n                -1, -1, -2, // coordinates of A\n                1, -1, -2, // coordinates of B\n                -1, 1, -2, // coordinates of D\n                1, 1, -2 // coordinates of C\n            ],\n            texCoords = [\n                0, 0,\n                1, 0,\n                0, 1,\n                1, 1\n            ];\n\n        // create vertex buffer object (VBO) for the coordinates\n        this.coordsBuffer = new vbo.Attribute(gl, {\"numComponents\": 3,\n            \"dataType\": gl.FLOAT,\n            \"data\": coords\n        });\n\n        this.texCoordsBuffer = new vbo.Attribute(gl, {\"numComponents\": 2,\n            \"dataType\": gl.FLOAT,\n            \"data\": texCoords\n        });\n    };\n\n    /**\n     * draw stage as points\n     * @param gl\n     * @param program\n     */\n    Stage.prototype.draw = function (gl, program) {\n        // bind the attribute buffers\n        this.coordsBuffer.bind(gl, program, \"vertexPosition\");\n        this.texCoordsBuffer.bind(gl, program, \"vertexTexCoords\");\n\n        // connect the vertices with triangles\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.coordsBuffer.numVertices());\n    };\n\n    // this module only returns the constructor function\n    return Stage;\n}); // define\n\n\n;\n","/*\n * Copyright (c) 2013 Aaron Boman and aaronboman.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n * Software.\n */\n\n// Thanks to CMS for the startsWith function\n// http://stackoverflow.com/questions/646628/javascript-startswith/646643#646643\nif(typeof String.prototype.startsWith !== 'function') {\n    String.prototype.startsWith = function(str) {\n        return this.slice(0, str.length) === str;\n    };\n}\n\ndefine('mesh',[\n], function() {\n\n    var Mesh = function(objectData) {\n\n        'use strict';\n\n        /*\n         With the given elementID or string of the OBJ, this parses the\n         OBJ and creates the mesh.\n         */\n\n        var verts = [],\n            vertNormals = [],\n            textures = [],\n\n        // unpacking stuff\n            packed = {};\n        packed.verts = [];\n        packed.norms = [];\n        packed.textures = [];\n        packed.hashindices = {};\n        packed.indices = [];\n        packed.index = 0;\n\n        // array of lines separated by the newline\n        var lines = objectData.split('\\n');\n        for (var i = 0; i < lines.length; i++) {\n            var line = '';\n            // if this is a vertex\n            if(lines[ i ].startsWith('v ')) {\n                line = lines[ i ].slice(2).split(\" \");\n                verts.push(line[ 0 ]);\n                verts.push(line[ 1 ]);\n                verts.push(line[ 2 ]);\n            }\n            // if this is a vertex normal\n            else if(lines[ i ].startsWith('vn')) {\n                line = lines[ i ].slice(3).split(\" \");\n                vertNormals.push(line[ 0 ]);\n                vertNormals.push(line[ 1 ]);\n                vertNormals.push(line[ 2 ]);\n            }\n            // if this is a texture\n            else if(lines[ i ].startsWith('vt')) {\n                line = lines[ i ].slice(3).split(\" \");\n                textures.push(line[ 0 ]);\n                textures.push(line[ 1 ]);\n            }\n            // if this is a face\n            else if(lines[ i ].startsWith('f ')) {\n                line = lines[ i ].slice(2).split(\" \");\n                var quad = false;\n                for (var j = 0; j < line.length; j++) {\n                    // Triangulating quads\n                    // quad: 'f v0/t0/vn0 v1/t1/vn1 v2/t2/vn2 v3/t3/vn3/'\n                    // corresponding triangles:\n                    //      'f v0/t0/vn0 v1/t1/vn1 v2/t2/vn2'\n                    //      'f v2/t2/vn2 v3/t3/vn3 v0/t0/vn0'\n                    if(j == 3 && !quad) {\n                        // add v2/t2/vn2 in again before continuing to 3\n                        j = 2;\n                        quad = true;\n                    }\n\n                    if(line[ j ] in packed.hashindices) {\n                        packed.indices.push(packed.hashindices[ line[ j ] ]);\n                    }\n                    else {\n                        var face = line[ j ].split('/');\n                        // vertex position\n                        packed.verts.push(verts[ (face[ 0 ] - 1) * 3 + 0 ]);\n                        packed.verts.push(verts[ (face[ 0 ] - 1) * 3 + 1 ]);\n                        packed.verts.push(verts[ (face[ 0 ] - 1) * 3 + 2 ]);\n                        // vertex textures\n                        packed.textures.push(textures[ (face[ 1 ] - 1) * 2 + 0 ]);\n                        packed.textures.push(textures[ (face[ 1 ] - 1) * 2 + 1 ]);\n                        // vertex normals\n                        packed.norms.push(vertNormals[ (face[ 2 ] - 1) * 3 + 0 ]);\n                        packed.norms.push(vertNormals[ (face[ 2 ] - 1) * 3 + 1 ]);\n                        packed.norms.push(vertNormals[ (face[ 2 ] - 1) * 3 + 2 ]);\n                        // add the newly created vertex to the list of indices\n                        packed.hashindices[ line[ j ] ] = packed.index;\n                        packed.indices.push(packed.index);\n                        // increment the counter\n                        packed.index += 1;\n                    }\n\n                    if(j == 3 && quad) {\n                        // add v0/t0/vn0 onto the second triangle\n                        packed.indices.push(packed.hashindices[ line[ 0 ] ]);\n                    }\n                }\n            }\n        }\n        this.vertices = packed.verts;\n        this.vertexNormals = packed.norms;\n        this.textures = packed.textures;\n        this.indices = packed.indices;\n    };\n\n    return Mesh;\n\n});\n","/**\n * @author Niels Garve, niels.garve.yahoo.de\n */\ndefine('Config',[],function () {\n    var config = {\n        'MESH_SAMPLER_WIDTH': 256, // mehr Vertizes können nicht adressiert werden\n        'MESH_SAMPLER_HEIGHT': 4 // mind. 3 (eine Reihe Indizes, eine Vertizes, eine Normalen), aber Vielfaches von 2\n    };\n\n    var Config = function () {\n    };\n\n    Config.prototype.get = function (name) {\n        return config[name];\n    };\n\n    return Config;\n});\n","/*!\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n\nvar Hogan = {};\n\n(function (Hogan, useArrayBuffer) {\n  Hogan.Template = function (codeObj, text, compiler, options) {\n    codeObj = codeObj || {};\n    this.r = codeObj.code || this.r;\n    this.c = compiler;\n    this.options = options || {};\n    this.text = text || '';\n    this.partials = codeObj.partials || {};\n    this.subs = codeObj.subs || {};\n    this.ib();\n  }\n\n  Hogan.Template.prototype = {\n    // render: replaced by generated code.\n    r: function (context, partials, indent) { return ''; },\n\n    // variable escaping\n    v: hoganEscape,\n\n    // triple stache\n    t: coerceToString,\n\n    render: function render(context, partials, indent) {\n      return this.ri([context], partials || {}, indent);\n    },\n\n    // render internal -- a hook for overrides that catches partials too\n    ri: function (context, partials, indent) {\n      return this.r(context, partials, indent);\n    },\n\n    // ensurePartial\n    ep: function(symbol, partials) {\n      var partial = this.partials[symbol];\n\n      // check to see that if we've instantiated this partial before\n      var template = partials[partial.name];\n      if (partial.instance && partial.base == template) {\n        return partial.instance;\n      }\n\n      if (typeof template == 'string') {\n        if (!this.c) {\n          throw new Error(\"No compiler available.\");\n        }\n        template = this.c.compile(template, this.options);\n      }\n\n      if (!template) {\n        return null;\n      }\n\n      // We use this to check whether the partials dictionary has changed\n      this.partials[symbol].base = template;\n\n      if (partial.subs) {\n        // Make sure we consider parent template now\n        if (this.activeSub === undefined) {\n          // Store parent template text in partials.stackText to perform substitutions in child templates correctly\n          partials.stackText  = this.text;\n        }\n         template = createSpecializedPartial(template, partial.subs, partial.partials, partials.stackText || this.text);\n       }\n      this.partials[symbol].instance = template;\n      return template;\n    },\n\n    // tries to find a partial in the current scope and render it\n    rp: function(symbol, context, partials, indent) {\n      var partial = this.ep(symbol, partials);\n      if (!partial) {\n        return '';\n      }\n\n      return partial.ri(context, partials, indent);\n    },\n\n    // render a section\n    rs: function(context, partials, section) {\n      var tail = context[context.length - 1];\n\n      if (!isArray(tail)) {\n        section(context, partials, this);\n        return;\n      }\n\n      for (var i = 0; i < tail.length; i++) {\n        context.push(tail[i]);\n        section(context, partials, this);\n        context.pop();\n      }\n    },\n\n    // maybe start a section\n    s: function(val, ctx, partials, inverted, start, end, tags) {\n      var pass;\n\n      if (isArray(val) && val.length === 0) {\n        return false;\n      }\n\n      if (typeof val == 'function') {\n        val = this.ms(val, ctx, partials, inverted, start, end, tags);\n      }\n\n      pass = !!val;\n\n      if (!inverted && pass && ctx) {\n        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);\n      }\n\n      return pass;\n    },\n\n    // find values with dotted names\n    d: function(key, ctx, partials, returnFound) {\n      var found,\n          names = key.split('.'),\n          val = this.f(names[0], ctx, partials, returnFound),\n          doModelGet = this.options.modelGet,\n          cx = null;\n\n      if (key === '.' && isArray(ctx[ctx.length - 2])) {\n        val = ctx[ctx.length - 1];\n      } else {\n        for (var i = 1; i < names.length; i++) {\n          found = findInScope(names[i], val, doModelGet);\n          if (found != null) {\n            cx = val;\n            val = found;\n          } else {\n            val = '';\n          }\n        }\n      }\n\n      if (returnFound && !val) {\n        return false;\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        ctx.push(cx);\n        val = this.mv(val, ctx, partials);\n        ctx.pop();\n      }\n\n      return val;\n    },\n\n    // find values with normal names\n    f: function(key, ctx, partials, returnFound) {\n      var val = false,\n          v = null,\n          found = false,\n          doModelGet = this.options.modelGet;\n\n      for (var i = ctx.length - 1; i >= 0; i--) {\n        v = ctx[i];\n        val = findInScope(key, v, doModelGet);\n        if (val != null) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return (returnFound) ? false : \"\";\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        val = this.mv(val, ctx, partials);\n      }\n\n      return val;\n    },\n\n    // higher order templates\n    ls: function(func, cx, partials, text, tags) {\n      var oldTags = this.options.delimiters;\n\n      this.options.delimiters = tags;\n      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));\n      this.options.delimiters = oldTags;\n\n      return false;\n    },\n\n    // compile text\n    ct: function(text, cx, partials) {\n      if (this.options.disableLambda) {\n        throw new Error('Lambda features disabled.');\n      }\n      return this.c.compile(text, this.options).render(cx, partials);\n    },\n\n    // template result buffering\n    b: (useArrayBuffer) ? function(s) { this.buf.push(s); } :\n                          function(s) { this.buf += s; },\n\n    fl: (useArrayBuffer) ? function() { var r = this.buf.join(''); this.buf = []; return r; } :\n                           function() { var r = this.buf; this.buf = ''; return r; },\n    // init the buffer\n    ib: function () {\n      this.buf = (useArrayBuffer) ? [] : '';\n    },\n\n    // method replace section\n    ms: function(func, ctx, partials, inverted, start, end, tags) {\n      var textSource,\n          cx = ctx[ctx.length - 1],\n          result = func.call(cx);\n\n      if (typeof result == 'function') {\n        if (inverted) {\n          return true;\n        } else {\n          textSource = (this.activeSub && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;\n          return this.ls(result, cx, partials, textSource.substring(start, end), tags);\n        }\n      }\n\n      return result;\n    },\n\n    // method replace variable\n    mv: function(func, ctx, partials) {\n      var cx = ctx[ctx.length - 1];\n      var result = func.call(cx);\n\n      if (typeof result == 'function') {\n        return this.ct(coerceToString(result.call(cx)), cx, partials);\n      }\n\n      return result;\n    },\n\n    sub: function(name, context, partials, indent) {\n      var f = this.subs[name];\n      if (f) {\n        this.activeSub = name;\n        f(context, partials, this, indent);\n        this.activeSub = false;\n      }\n    }\n\n  };\n\n  //Find a key in an object\n  function findInScope(key, scope, doModelGet) {\n    var val, checkVal;\n\n    if (scope && typeof scope == 'object') {\n\n      if (scope[key] != null) {\n        val = scope[key];\n\n      // try lookup with get for backbone or similar model data\n      } else if (doModelGet && scope.get && typeof scope.get == 'function') {\n        val = scope.get(key);\n      }\n    }\n\n    return val;\n  }\n\n  function createSpecializedPartial(instance, subs, partials, childText) {\n    function PartialTemplate() {};\n    PartialTemplate.prototype = instance;\n    function Substitutions() {};\n    Substitutions.prototype = instance.subs;\n    var key;\n    var partial = new PartialTemplate();\n    partial.subs = new Substitutions();\n    partial.subsText = {};  //hehe. substext.\n    partial.ib();\n\n    for (key in subs) {\n      partial.subs[key] = subs[key];\n      partial.subsText[key] = childText;\n    }\n\n    for (key in partials) {\n      partial.partials[key] = partials[key];\n    }\n\n    return partial;\n  }\n\n  var rAmp = /&/g,\n      rLt = /</g,\n      rGt = />/g,\n      rApos = /\\'/g,\n      rQuot = /\\\"/g,\n      hChars = /[&<>\\\"\\']/;\n\n  function coerceToString(val) {\n    return String((val === null || val === undefined) ? '' : val);\n  }\n\n  function hoganEscape(str) {\n    str = coerceToString(str);\n    return hChars.test(str) ?\n      str\n        .replace(rAmp, '&amp;')\n        .replace(rLt, '&lt;')\n        .replace(rGt, '&gt;')\n        .replace(rApos, '&#39;')\n        .replace(rQuot, '&quot;') :\n      str;\n  }\n\n  var isArray = Array.isArray || function(a) {\n    return Object.prototype.toString.call(a) === '[object Array]';\n  };\n\n})(typeof exports !== 'undefined' ? exports : Hogan);\n\n\n//>>excludeStart('excludeHogan', pragmas.excludeHogan)\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})(typeof exports !== 'undefined' ? exports : Hogan);\n\n//>>excludeEnd('excludeHogan')\n\n\nif (typeof define === 'function' && define.amd) {\n  define('hogan',Hogan);\n}\n;\n","/**\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine('text',['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci, xpcIsWindows,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = {},\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.10',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.indexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1, name.length);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            // Do not load if it is an empty: url\n            if (url.indexOf('empty:') === 0) {\n                onLoad();\n                return;\n            }\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node &&\n            !process.versions['node-webkit'])) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback, errback) {\n            try {\n                var file = fs.readFileSync(url, 'utf8');\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n                if (file.indexOf('\\uFEFF') === 0) {\n                    file = file.substring(1);\n                }\n                callback(file);\n            } catch (e) {\n                errback(e);\n            }\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n\n                    if (masterConfig.onXhrComplete) {\n                        masterConfig.onXhrComplete(xhr, url);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                if (line !== null) {\n                    stringBuffer.append(line);\n                }\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes,\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\n\n        text.get = function (url, callback) {\n            var inStream, convertStream, fileObj,\n                readData = {};\n\n            if (xpcIsWindows) {\n                url = url.replace(/\\//g, '\\\\');\n            }\n\n            fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n\n","/**@license\n * RequireJS Hogan Plugin | v0.3.0 (2013/06/11)\n * Author: Miller Medeiros | MIT License\n */\ndefine('hgn',['hogan', 'text'], function (hogan, text) {\n\n    var DEFAULT_EXTENSION = '.mustache';\n\n    var _buildMap = {};\n    var _buildTemplateText = 'define(\"{{pluginName}}!{{moduleName}}\", [\"hogan\"], function(hogan){'+\n                             '  var tmpl = new hogan.Template({{{fn}}}, \"\", hogan);'+\n                             // need to use apply to bind the proper scope.\n                             '  function render(){ return tmpl.render.apply(tmpl, arguments); } render.template = tmpl; return render;'+\n                             '});\\n';\n    var _buildTemplate;\n\n\n    function load(name, req, onLoad, config){\n        var hgnConfig = config.hgn || {};\n        var fileName = name;\n        fileName += hgnConfig && hgnConfig.templateExtension != null? hgnConfig.templateExtension : DEFAULT_EXTENSION;\n\n        // load text files with text plugin\n        text.get(req.toUrl(fileName), function(data){\n            var compilationOptions = hgnConfig.compilationOptions? mixIn({}, hgnConfig.compilationOptions) : {};\n\n            if (config.isBuild) {\n                // store compiled function if build\n                // and should always be a string\n                compilationOptions.asString = true;\n                _buildMap[name] = hogan.compile(data, compilationOptions);\n            }\n\n            // maybe it's required by some other plugin during build\n            // so return the compiled template even during build\n            var template = hogan.compile(data, compilationOptions);\n            var render = bind(template.render, template);\n            // add text property for debugging if needed.\n            // it's important to notice that this value won't be available\n            // after build.\n            render.text = template.text;\n            render.template = template;\n            // return just the render method so it's easier to use\n            onLoad( render );\n        });\n    }\n\n    function bind(fn, context) {\n        return function(){\n            return fn.apply(context, arguments);\n        };\n    }\n\n    function mixIn(target, source) {\n        var key;\n        for (key in source){\n            if ( Object.prototype.hasOwnProperty.call(source, key) ) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    function write(pluginName, moduleName, writeModule){\n        if(moduleName in _buildMap){\n            if (! _buildTemplate) {\n                // using templates to generate compiled templates, so meta :P\n                _buildTemplate = hogan.compile( _buildTemplateText );\n            }\n            var fn = _buildMap[moduleName];\n            writeModule( _buildTemplate.render({\n                pluginName : pluginName,\n                moduleName : moduleName,\n                fn : fn\n            }) );\n        }\n    }\n\n    return {\n        load : load,\n        write : write\n    };\n\n});\n\n","\ndefine(\"hgn!../shaders/pathtracing.vert\", [\"hogan\"], function(hogan){  var tmpl = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||\"\");t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Pathtracing\");t.b(\"\\n\" + i);t.b(\" *\");t.b(\"\\n\" + i);t.b(\" * @author Niels Garve, niels.garve.yahoo.de\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"#version 100\");t.b(\"\\n\" + i);t.b(\"precision mediump float;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"attribute vec3 vertexPosition;\");t.b(\"\\n\" + i);t.b(\"attribute vec2 vertexTexCoords;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"uniform mat4 modelViewMatrix;\");t.b(\"\\n\" + i);t.b(\"uniform mat4 projectionMatrix;\");t.b(\"\\n\" + i);t.b(\"uniform vec3 eyePosition;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"varying vec3 rayDirection;\");t.b(\"\\n\" + i);t.b(\"varying vec2 texCoords;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Liefert die inverse Matrix zu mat. Der Algorithmus ist gl-matrix-1.3.7.js entnommen und von mir auf GLSL portiert\");t.b(\"\\n\" + i);t.b(\" * worden. Achtung: In der gl-matrix-1.3.7.js-Bibliothek passiert die Initialisierung der Matrizen in Reihen, in der \");t.b(\"\\n\" + i);t.b(\" * GLSL in Spalten!\");t.b(\"\\n\" + i);t.b(\" * @author vgl. Brandon Jones, Colin MacKenzie IV\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"mat4 inverse(mat4 mat) {\");t.b(\"\\n\" + i);t.b(\"\t// Cache the matrix values (makes for huge speed increases!)\");t.b(\"\\n\" + i);t.b(\"\tfloat a00 = mat[0].x; float a01 = mat[0].y; float a02 = mat[0].z; float a03 = mat[0].w;\");t.b(\"\\n\" + i);t.b(\"\tfloat a10 = mat[1].x; float a11 = mat[1].y; float a12 = mat[1].z; float a13 = mat[1].w;\");t.b(\"\\n\" + i);t.b(\"\tfloat a20 = mat[2].x; float a21 = mat[2].y; float a22 = mat[2].z; float a23 = mat[2].w;\");t.b(\"\\n\" + i);t.b(\"\tfloat a30 = mat[3].x; float a31 = mat[3].y; float a32 = mat[3].z; float a33 = mat[3].w;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tfloat b00 = a00 * a11 - a01 * a10;\");t.b(\"\\n\" + i);t.b(\"\tfloat b01 = a00 * a12 - a02 * a10;\");t.b(\"\\n\" + i);t.b(\"\tfloat b02 = a00 * a13 - a03 * a10;\");t.b(\"\\n\" + i);t.b(\"\tfloat b03 = a01 * a12 - a02 * a11;\");t.b(\"\\n\" + i);t.b(\"\tfloat b04 = a01 * a13 - a03 * a11;\");t.b(\"\\n\" + i);t.b(\"\tfloat b05 = a02 * a13 - a03 * a12;\");t.b(\"\\n\" + i);t.b(\"\tfloat b06 = a20 * a31 - a21 * a30;\");t.b(\"\\n\" + i);t.b(\"\tfloat b07 = a20 * a32 - a22 * a30;\");t.b(\"\\n\" + i);t.b(\"\tfloat b08 = a20 * a33 - a23 * a30;\");t.b(\"\\n\" + i);t.b(\"\tfloat b09 = a21 * a32 - a22 * a31;\");t.b(\"\\n\" + i);t.b(\"\tfloat b10 = a21 * a33 - a23 * a31;\");t.b(\"\\n\" + i);t.b(\"\tfloat b11 = a22 * a33 - a23 * a32;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tfloat d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\");t.b(\"\\n\" + i);t.b(\"\tfloat invDet;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t// Calculate the determinant\");t.b(\"\\n\" + i);t.b(\"\tif (d == 0.0) {\");t.b(\"\\n\" + i);t.b(\"\t\t/**\");t.b(\"\\n\" + i);t.b(\"\t\t * liefer Identität TODO ok?\");t.b(\"\\n\" + i);t.b(\"\t\t * @author Niels Garve, niels.garve.yahoo.de\");t.b(\"\\n\" + i);t.b(\"\t\t */\");t.b(\"\\n\" + i);t.b(\"\t\treturn mat4(1.0);\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"\tinvDet = 1.0 / d;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\treturn mat4(\");t.b(\"\\n\" + i);t.b(\"\t\t(a11 * b11 - a12 * b10 + a13 * b09) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a10 * b11 + a12 * b08 - a13 * b07) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(a10 * b10 - a11 * b08 + a13 * b06) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a10 * b09 + a11 * b07 - a12 * b06) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a01 * b11 + a02 * b10 - a03 * b09) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(a00 * b11 - a02 * b08 + a03 * b07) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a00 * b10 + a01 * b08 - a03 * b06) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(a00 * b09 - a01 * b07 + a02 * b06) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(a31 * b05 - a32 * b04 + a33 * b03) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a30 * b05 + a32 * b02 - a33 * b01) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(a30 * b04 - a31 * b02 + a33 * b00) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a30 * b03 + a31 * b01 - a32 * b00) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a21 * b05 + a22 * b04 - a23 * b03) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(a20 * b05 - a22 * b02 + a23 * b01) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(-a20 * b04 + a21 * b02 - a23 * b00) * invDet,\");t.b(\"\\n\" + i);t.b(\"\t\t(a20 * b03 - a21 * b01 + a22 * b00) * invDet\");t.b(\"\\n\" + i);t.b(\"\t\t);\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"void main() {\");t.b(\"\\n\" + i);t.b(\"\tgl_Position = projectionMatrix *\");t.b(\"\\n\" + i);t.b(\"\t\t\t  // modelViewMatrix *\");t.b(\"\\n\" + i);t.b(\"\t\t\t  vec4(vertexPosition, 1.0);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\trayDirection = (vec4(vertexPosition - eyePosition, 1.0) * inverse(modelViewMatrix)).xyz;\");t.b(\"\\n\" + i);t.b(\"\ttexCoords = vertexTexCoords;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");return t.fl(); },partials: {}, subs: {  }}, \"\", hogan);  function render(){ return tmpl.render.apply(tmpl, arguments); } render.template = tmpl; return render;});\n\n","\ndefine(\"hgn!../shaders/pathtracing.frag\", [\"hogan\"], function(hogan){  var tmpl = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||\"\");t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Pathtracing\");t.b(\"\\n\" + i);t.b(\" *\");t.b(\"\\n\" + i);t.b(\" * @author Niels Garve, niels.garve.yahoo.de\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"#version 100\");t.b(\"\\n\" + i);t.b(\"precision mediump float;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"// Intervallgrenzen für Werte von t (des Skalars) bei der Schnittpunktberechnung (Rundungsfehler abfangen)\");t.b(\"\\n\" + i);t.b(\"#define T_MIN 0.001\");t.b(\"\\n\" + i);t.b(\"#define T_MAX 1000000.0\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"// Anzahl \\\"bounces\\\"\");t.b(\"\\n\" + i);t.b(\"#define DEPTH 3\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"#define M_PI 3.14159265359\");t.b(\"\\n\" + i);t.b(\"#define EPSILON 0.001\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"#define NUMBER_OF_SPHERES \");t.b(t.v(t.f(\"numberOfSpheres\",c,p,0)));t.b(\"\\n\" + i);t.b(\"#define NUMBER_OF_SPHERICAL_LIGHTS \");t.b(t.v(t.f(\"numberOfSphericalLights\",c,p,0)));t.b(\"\\n\" + i);t.b(\"#define MESH_SAMPLER_WIDTH \");t.b(t.v(t.f(\"meshSamplerWidth\",c,p,0)));t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"// \\\"struct\\\"-Orientiertes programmieren\");t.b(\"\\n\" + i);t.b(\"struct Ray {\");t.b(\"\\n\" + i);t.b(\"\tvec3 start;\");t.b(\"\\n\" + i);t.b(\"\tvec3 direction;\");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\" + i);t.b(\"struct Material {\");t.b(\"\\n\" + i);t.b(\"\t// zwei Boolesche Variablen zur Auswahl der BRDF\");t.b(\"\\n\" + i);t.b(\"\tbool isPerfectMirror;\");t.b(\"\\n\" + i);t.b(\"\tbool isDiffuse;\");t.b(\"\\n\" + i);t.b(\"\tvec3 Le; // L_emit\");t.b(\"\\n\" + i);t.b(\"\tvec3 Kd; // Farbe \");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\" + i);t.b(\"struct Hit {\");t.b(\"\\n\" + i);t.b(\"\t// eigentlich sind t und hitPoint redundant, aber t ist eine schnelle Metrik für die Abstandsmessung und hitPoint\");t.b(\"\\n\" + i);t.b(\"\t// ist hier einfach gut aufgehoben\");t.b(\"\\n\" + i);t.b(\"\tfloat t;\");t.b(\"\\n\" + i);t.b(\"\tvec3 hitPoint;\");t.b(\"\\n\" + i);t.b(\"\tMaterial material;\");t.b(\"\\n\" + i);t.b(\"\tvec3 normal;\");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"// uniforms\");t.b(\"\\n\" + i);t.b(\"uniform vec3 La; // Hintergrundfarbe\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"// Benötigt für Zufallsvariable\");t.b(\"\\n\" + i);t.b(\"uniform float secondsSinceStart;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"uniform sampler2D texture0;\");t.b(\"\\n\" + i);t.b(\"uniform float textureWeight;\");t.b(\"\\n\" + i);t.b(\"uniform vec3 eyePosition;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"// varyings\");t.b(\"\\n\" + i);t.b(\"varying vec3 rayDirection;\");t.b(\"\\n\" + i);t.b(\"varying vec2 texCoords;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"//\");if(t.s(t.f(\"hasSpheres\",c,p,1),c,p,0,1252,2582,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"struct Sphere {\");t.b(\"\\n\" + i);t.b(\"\tvec3 center;\");t.b(\"\\n\" + i);t.b(\"\tfloat radius;\");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"uniform Sphere spheres[NUMBER_OF_SPHERES];\");t.b(\"\\n\" + i);t.b(\"uniform Material sphereMaterials[NUMBER_OF_SPHERES];\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Schneidet ray mit sphere und liefert inout-firstHit, falls \\\"out\\\"-firstHit.t in (tMin, ..., \\\"in\\\"-firstHit.t) liegt.\");t.b(\"\\n\" + i);t.b(\" * Sonst: nichts. material gehört zu sphere.\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"void hitSphere(Ray ray, Sphere sphere, float tMin, inout Hit firstHit, Material material) {\");t.b(\"\\n\" + i);t.b(\"\tvec3 toSphere = ray.start - sphere.center;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t// Terme der Mitternachtsformel\");t.b(\"\\n\" + i);t.b(\"\tfloat a = dot(ray.direction, ray.direction);\");t.b(\"\\n\" + i);t.b(\"\tfloat b = 2.0 * dot(toSphere, ray.direction);\");t.b(\"\\n\" + i);t.b(\"\tfloat c = dot(toSphere, toSphere) - sphere.radius * sphere.radius;\");t.b(\"\\n\" + i);t.b(\"\tfloat discriminant = b * b - 4.0 * a * c; // Wurzel\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tif (discriminant < 0.0) return; // keine Lösung\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tif (discriminant == 0.0) { // eine Lösung\");t.b(\"\\n\" + i);t.b(\"\t\tfloat t = -b / (2.0 * a);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\tif (tMin < t && t < firstHit.t) {\");t.b(\"\\n\" + i);t.b(\"\t\t\tvec3 hitPoint = ray.start + t * ray.direction;\");t.b(\"\\n\" + i);t.b(\"\t\t\tfirstHit = Hit(t, hitPoint, material, normalize(hitPoint - sphere.center));\");t.b(\"\\n\" + i);t.b(\"\t\t}\");t.b(\"\\n\" + i);t.b(\"\t} else { // zwei Lösungen\");t.b(\"\\n\" + i);t.b(\"\t\tfloat t0 = (-b + sqrt(discriminant)) / (2.0 * a);\");t.b(\"\\n\" + i);t.b(\"\t\tfloat t1 = (-b - sqrt(discriminant)) / (2.0 * a);\");t.b(\"\\n\" + i);t.b(\"\t\tfloat t = min(t0, t1);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\tif (tMin < t && t < firstHit.t) {\");t.b(\"\\n\" + i);t.b(\"\t\t\tvec3 hitPoint = ray.start + t * ray.direction;\");t.b(\"\\n\" + i);t.b(\"\t\t\tfirstHit = Hit(t, hitPoint, material, normalize(hitPoint - sphere.center));\t\t\t\");t.b(\"\\n\" + i);t.b(\"\t\t}\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\" + i);t.b(\"//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"//\");if(t.s(t.f(\"hasCornellBox\",c,p,1),c,p,0,2619,3490,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"struct Plane { // Hessesche Normalform\");t.b(\"\\n\" + i);t.b(\"\tvec3 n;\");t.b(\"\\n\" + i);t.b(\"\tfloat d;\");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"struct CornellBox {\");t.b(\"\\n\" + i);t.b(\"\tPlane planes[6];\");t.b(\"\\n\" + i);t.b(\"\tMaterial materials[6];\");t.b(\"\\n\" + i);t.b(\"\t// eigentlich redundant, aber benötigt für Mittelpunktberechnung (siehe Li-Berechnung)\");t.b(\"\\n\" + i);t.b(\"\tvec3 minCorner;\");t.b(\"\\n\" + i);t.b(\"\tvec3 maxCorner;\");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"uniform CornellBox cornellBox;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Schneidet ray mit plane und liefert inout-firstHit, falls \\\"out\\\"-firstHit.t in (tMin, ..., \\\"in\\\"-firstHit.t) liegt.\");t.b(\"\\n\" + i);t.b(\" * Sonst: nichts. material gehört zu plane.\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"void hitPlane(Ray ray, Plane plane, float tMin, inout Hit firstHit, Material material) {\");t.b(\"\\n\" + i);t.b(\"\tfloat denominator = dot(plane.n, ray.direction); // z. dt. Nenner\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tif (denominator == 0.0) return;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tfloat t = (plane.d - dot(plane.n, ray.start)) / denominator;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tif (tMin < t && t < firstHit.t) {\");t.b(\"\\n\" + i);t.b(\"\t\tvec3 hitPoint = ray.start + t * ray.direction;\");t.b(\"\\n\" + i);t.b(\"\t\tfirstHit = Hit(t, hitPoint, material, plane.n); // bereits Normalisiert\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\" + i);t.b(\"//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"//\");if(t.s(t.f(\"hasMesh\",c,p,1),c,p,0,3524,5521,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"struct Triangle {\");t.b(\"\\n\" + i);t.b(\"\tvec3 v0;\");t.b(\"\\n\" + i);t.b(\"\tvec3 v1;\");t.b(\"\\n\" + i);t.b(\"\tvec3 v2;\");t.b(\"\\n\" + i);t.b(\"\tvec3 n; // erst mal reicht nur eine Normale\");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"struct Mesh {\");t.b(\"\\n\" + i);t.b(\"\tsampler2D data;\");t.b(\"\\n\" + i);t.b(\"\tvec2 onePixel; // Größe eines Pixel zur Adressierung\");t.b(\"\\n\" + i);t.b(\"};\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"uniform Mesh mesh;\");t.b(\"\\n\" + i);t.b(\"uniform Material meshMaterial;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Schneidet ray mit triangle und liefert inout-firstHit, falls \\\"out\\\"-firstHit.t in (tMin, ..., \\\"in\\\"-firstHit.t)\");t.b(\"\\n\" + i);t.b(\" * liegt. Sonst: nichts. material gehört zu triangle.\");t.b(\"\\n\" + i);t.b(\" * @author vgl. Moeller, S. 581\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"void hitTriangle(Ray ray, Triangle triangle, float tMin, inout Hit firstHit, Material material) {\");t.b(\"\\n\" + i);t.b(\"\tvec3 e1 = triangle.v1 - triangle.v0;\");t.b(\"\\n\" + i);t.b(\"\tvec3 e2 = triangle.v2 - triangle.v0;\");t.b(\"\\n\" + i);t.b(\"\tvec3 p = cross(ray.direction, e2);\");t.b(\"\\n\" + i);t.b(\"\tfloat a = dot(e1, p);\");t.b(\"\\n\" + i);t.b(\"\tif (a > -EPSILON && a < EPSILON) return; // \\\"REJECT\\\"\");t.b(\"\\n\" + i);t.b(\"\tfloat f = 1.0 / a;\");t.b(\"\\n\" + i);t.b(\"\tvec3 s = ray.start - triangle.v0;\");t.b(\"\\n\" + i);t.b(\"\tfloat u = f * dot(s, p);\");t.b(\"\\n\" + i);t.b(\"\tif (u < 0.0 || u > 1.0) return; // \\\"REJECT\\\"\");t.b(\"\\n\" + i);t.b(\"\tvec3 q = cross(s, e1);\");t.b(\"\\n\" + i);t.b(\"\tfloat v = f * dot(ray.direction, q);\");t.b(\"\\n\" + i);t.b(\"\tif (v < 0.0 || (u + v) > 1.0) return; // \\\"REJECT\\\"\");t.b(\"\\n\" + i);t.b(\"\tfloat t = f * dot(e2, q);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tif (tMin < t && t < firstHit.t) {\");t.b(\"\\n\" + i);t.b(\"\t\tvec3 hitPoint = ray.start + t * ray.direction;\");t.b(\"\\n\" + i);t.b(\"\t\tfirstHit = Hit(t, hitPoint, material, triangle.n); // bereits Normalisiert\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Liefert den RGB-Vektor von Pixel [x, y] der mesh.data Textur. Der Wertebereich pro Kanal \\\"ist Element von\\\"\");t.b(\"\\n\" + i);t.b(\" * [-128.0, ..., 127.0], also der eines Bytes in Zweierkomplement-Darstellung. Es handelt sich tatsächlich um nur 255\");t.b(\"\\n\" + i);t.b(\" * Werte, obwohl es \\\"floats\\\" sind. Das Weiterrechnen mit floats ist einfach einfacher. Mit r lassen sich die Werte\");t.b(\"\\n\" + i);t.b(\" * konstant erhöhen oder verringern. Das ist eine Trick, um die Richtung --- auf- oder abrunden --- bei einem Cast auf \");t.b(\"\\n\" + i);t.b(\" * int einzustellen. ceil() oder floor() müssen dann nicht noch extra angewendet werden.\");t.b(\"\\n\" + i);t.b(\" * \");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"vec3 meshSamplerLookup(int x, int y, float r) {\");t.b(\"\\n\" + i);t.b(\"\tvec3 res = texture2D(mesh.data, vec2(x, y) * mesh.onePixel).xyz * 255.0 + r;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t// Zweierkomplement\");t.b(\"\\n\" + i);t.b(\"\tbvec3 b = greaterThan(res, vec3(127.0, 127.0, 127.0));\");t.b(\"\\n\" + i);t.b(\"\tres -= vec3(256.0, 256.0, 256.0) * vec3(b);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\treturn res;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\" + i);t.b(\"//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Schneidet alle Szeneobjekte mit ray und liefert den nächstliegendsten Hit.\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"Hit sceneFirstHit(Ray ray) {\");t.b(\"\\n\" + i);t.b(\"\tHit firstHit; firstHit.t = T_MAX; // firstHit repräsentiert zunächst den \\\"Schnitt in der Unendlichkeit\\\"\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t// Li-Berechnung benötigt Le!\");t.b(\"\\n\" + i);t.b(\"\tMaterial firstHitMaterial;\");t.b(\"\\n\" + i);t.b(\"\tfirstHitMaterial.Le = vec3(0.0, 0.0, 0.0);\");t.b(\"\\n\" + i);t.b(\"\tfirstHit.material = firstHitMaterial;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t//\");if(t.s(t.f(\"hasSpheres\",c,p,1),c,p,0,5917,6038,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"\tfor (int i = 0; i < NUMBER_OF_SPHERES; i++) {\");t.b(\"\\n\" + i);t.b(\"\t\thitSphere(ray, spheres[i], T_MIN, firstHit, sphereMaterials[i]);\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"\t//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t//\");if(t.s(t.f(\"hasCornellBox\",c,p,1),c,p,0,6076,6214,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"\tfor (int i = 0; i < 6; i++) { // immer 6 \\\"Wände\\\"\");t.b(\"\\n\" + i);t.b(\"\t\thitPlane(ray, cornellBox.planes[i], T_MIN, firstHit, cornellBox.materials[i]);\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"\t//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t//\");if(t.s(t.f(\"hasMesh\",c,p,1),c,p,0,6249,6820,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"\tfor (int i = 0; i < MESH_SAMPLER_WIDTH; i++) {\");t.b(\"\\n\" + i);t.b(\"\t\tivec3 indices = ivec3(meshSamplerLookup(i, 3, 0.1)); // Der Textur-Ursprung ist links-unten\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\t// \\\"0-terminierend\\\"\");t.b(\"\\n\" + i);t.b(\"\t\tif (indices.x == 0 && indices.y == 0 && indices.z == 0) break;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\tTriangle triangle = Triangle(meshSamplerLookup(indices.x, 2, 0.0),\");t.b(\"\\n\" + i);t.b(\"\t\t\t                         meshSamplerLookup(indices.y, 2, 0.0),\");t.b(\"\\n\" + i);t.b(\"\t\t\t                         meshSamplerLookup(indices.z, 2, 0.0),\");t.b(\"\\n\" + i);t.b(\"\t\t\t                         normalize(meshSamplerLookup(i, 1, 0.0)));\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\thitTriangle(ray, triangle, T_MIN, firstHit, meshMaterial);\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"\t//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\treturn firstHit;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Berechnet die lokale Beleuchtung in x durch die Lichtquelle in Richtung s mit n ist die Normale in x. Das Resultat\");t.b(\"\\n\" + i);t.b(\" * der Berechnung wird zu res addiert.\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"void Li(vec3 x, vec3 s, vec3 n, inout vec3 res) {\");t.b(\"\\n\" + i);t.b(\"\tHit hit = sceneFirstHit(Ray(x, s));\");t.b(\"\\n\" + i);t.b(\"\tfloat theCos = dot(n, s);\");t.b(\"\\n\" + i);t.b(\"\tif (theCos > 0.0) res += hit.material.Le * theCos; // Trick: Schatten-Test ohne if\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Berechnet die lokale Beleuchtung in hit durch alle Lichtquellen der Szene.\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"vec3 prepareLiCalculation(Hit hit) {\");t.b(\"\\n\" + i);t.b(\"\tvec3 res = vec3(0.0, 0.0, 0.0);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t//\");if(t.s(t.f(\"hasSpheres\",c,p,1),c,p,0,7396,7642,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"\tfor (int i = 0; i < NUMBER_OF_SPHERICAL_LIGHTS; i++) {\");t.b(\"\\n\" + i);t.b(\"\t\t// die Lichter befinden sich am Anfang der Reihungen\");t.b(\"\\n\" + i);t.b(\"\t\tvec3 toSource = normalize(spheres[i].center - hit.hitPoint); // TODO Sampling!\");t.b(\"\\n\" + i);t.b(\"\t\tLi(hit.hitPoint, toSource, hit.normal, res);\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"\t//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t//\");if(t.s(t.f(\"hasCornellBox\",c,p,1),c,p,0,7680,8065,\"{{ }}\")){t.rs(c,p,function(c,p,t){t.b(\"\\n\" + i);t.b(\"\tvec2 centerXY = vec2((cornellBox.minCorner.x + cornellBox.maxCorner.x) / 2.0,\");t.b(\"\\n\" + i);t.b(\"\t\t\t\t   (cornellBox.minCorner.y + cornellBox.maxCorner.y) / 2.0); // TODO Sampling\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t// TODO noch \\\"hard coded\\\"! Und zwar leuchtet die \\\"top plane\\\"\");t.b(\"\\n\" + i);t.b(\"\tvec3 toCornellBoxNearSource = normalize(vec3(centerXY, cornellBox.maxCorner.z) - hit.hitPoint);\");t.b(\"\\n\" + i);t.b(\"\tLi(hit.hitPoint, toCornellBoxNearSource, hit.normal, res);\");t.b(\"\\n\" + i);t.b(\"\t//\");});c.pop();}t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\treturn res;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * konstant\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"vec3 perfectMirrorBRDF() {\");t.b(\"\\n\" + i);t.b(\"\treturn vec3(1.0, 1.0, 1.0);\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Liefert den \\\"perfekten\\\" Ausfallvektor out-L. Achtung: i ist der \\\"incident vector\\\" --> Richtung beachten! n ist die \");t.b(\"\\n\" + i);t.b(\" * Normale.\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"float perfectMirrorNextDirection(out vec3 L, vec3 i, vec3 n) {\");t.b(\"\\n\" + i);t.b(\"\tL = normalize(reflect(i, n)); // TODO already normalized?\");t.b(\"\\n\" + i);t.b(\"\treturn 1.0;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * konstant\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"vec3 diffuseBRDF(Material material) {\");t.b(\"\\n\" + i);t.b(\"\treturn material.Kd;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Liefert, je nach scale und seed, ein Zufallszahl.\");t.b(\"\\n\" + i);t.b(\" * @author vgl. Evan Wallace\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"float random(vec3 scale, float seed) {\");t.b(\"\\n\" + i);t.b(\"\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Liefert den zufälligen Ausfallvektor out-L aus der Halbkugel und seine Wahrscheinlichkeit als \\\"return value\\\". N ist\");t.b(\"\\n\" + i);t.b(\" * die Normale und V ist der \\\"view\\\"-Vektor. Achtung: V \\\"zeigt\\\" entgegengesetzt zur Strahl-Richtung! seed wird für die\");t.b(\"\\n\" + i);t.b(\" * Zufallszahl-Berechnung benötigt.\");t.b(\"\\n\" + i);t.b(\" * @author vgl. Szirmay-Kalos, S. 104\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"float diffuseNextDirection(out vec3 L, vec3 N, vec3 V, float seed) {\");t.b(\"\\n\" + i);t.b(\"\tfloat u = random(vec3(12.9898, 78.233, 151.7182), seed);\");t.b(\"\\n\" + i);t.b(\"\tfloat v = random(vec3(63.7264, 10.873, 623.6736), seed);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tfloat theta = asin(sqrt(u));\");t.b(\"\\n\" + i);t.b(\"\tfloat phi = M_PI * 2.0 * v;\");t.b(\"\\n\" + i);t.b(\"\tvec3 O = cross(N, vec3(0, 0, 1));\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tif (length(O) < EPSILON) {\");t.b(\"\\n\" + i);t.b(\"\t\tO = cross(N, vec3(0, 1, 0));\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tvec3 P = cross(N, O);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tL = normalize(N * cos(theta) + O * sin(theta) * cos(phi) + P * sin(theta) * sin(phi)); // TODO already normalized?\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tfloat prob = cos(theta) / M_PI;\");t.b(\"\\n\" + i);t.b(\"\treturn prob;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"/**\");t.b(\"\\n\" + i);t.b(\" * Path tracing (vgl. Szirmay-Kalos, S. 112; Kevin Suffern S. 547 - 549)\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\"vec3 pathTrace() {\");t.b(\"\\n\" + i);t.b(\"\tRay ray = Ray(eyePosition, normalize(rayDirection)); // Primärstrahl\");t.b(\"\\n\" + i);t.b(\"\tvec3 resColor = vec3(1, 1, 1);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\tfor (int j = 0; j < DEPTH; j++) { // entspricht dem Produkt von i = 0 bis n\");t.b(\"\\n\" + i);t.b(\"\t\tHit hit = sceneFirstHit(ray);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\t// Fall: kein Schnittpunkt\");t.b(\"\\n\" + i);t.b(\"\t\tif (hit.t == T_MAX) return La;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\t// Fall: Licht geschnitten\");t.b(\"\\n\" + i);t.b(\"\t\tif (length(hit.material.Le) > 0.0) {\");t.b(\"\\n\" + i);t.b(\"\t\t\treturn resColor * hit.material.Le;\");t.b(\"\\n\" + i);t.b(\"\t\t}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\t// L_i (leider zu langsam)\");t.b(\"\\n\" + i);t.b(\"\t\t// resColor += prepareLiCalculation(hit);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\t// BRDF und Co.\");t.b(\"\\n\" + i);t.b(\"\t\tvec3 brdf; vec3 nextDirection;\");t.b(\"\\n\" + i);t.b(\"\t\tfloat prob;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\tif (hit.material.isPerfectMirror) {\");t.b(\"\\n\" + i);t.b(\"\t\t\tbrdf = perfectMirrorBRDF();\");t.b(\"\\n\" + i);t.b(\"\t\t\tprob = perfectMirrorNextDirection(nextDirection, ray.direction, hit.normal);\");t.b(\"\\n\" + i);t.b(\"\t\t} else if (hit.material.isDiffuse) {\");t.b(\"\\n\" + i);t.b(\"\t\t\tbrdf = diffuseBRDF(hit.material);\");t.b(\"\\n\" + i);t.b(\"\t\t\tprob = diffuseNextDirection(nextDirection, hit.normal, -ray.direction, secondsSinceStart + float(j));\");t.b(\"\\n\" + i);t.b(\"\t\t}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\tif (prob < EPSILON) return La; // Russian Roulette\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\tfloat cost = dot(nextDirection, hit.normal);\");t.b(\"\\n\" + i);t.b(\"\t\tif (cost < 0.0) cost = -cost;\");t.b(\"\\n\" + i);t.b(\"\t\tif (cost < EPSILON) return La;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\t// resColor akkumulieren\");t.b(\"\\n\" + i);t.b(\"\t\tresColor *= brdf * cost / prob;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\t\t// Iteration\");t.b(\"\\n\" + i);t.b(\"\t\tray = Ray(hit.hitPoint, nextDirection); // neuer Strahl\");t.b(\"\\n\" + i);t.b(\"\t}\");t.b(\"\\n\" + i);t.b(\"\treturn La; // Fall: maximale \\\"depth\\\" erreicht\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"void main() {\");t.b(\"\\n\" + i);t.b(\"\t// \\\"blending\\\" vgl. Evan Wallace\");t.b(\"\\n\" + i);t.b(\"\tgl_FragColor = mix(vec4(pathTrace(), 1.0), texture2D(texture0, texCoords), textureWeight);\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");return t.fl(); },partials: {}, subs: {  }}, \"\", hogan);  function render(){ return tmpl.render.apply(tmpl, arguments); } render.template = tmpl; return render;});\n\n","\ndefine(\"hgn!../shaders/texture.vert\", [\"hogan\"], function(hogan){  var tmpl = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||\"\");t.b(\"/*\");t.b(\"\\n\" + i);t.b(\" * WebGL core teaching framwork \");t.b(\"\\n\" + i);t.b(\" * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de\");t.b(\"\\n\" + i);t.b(\" * (C)opyright Niels Garve, niels.garve.yahoo.de\");t.b(\"\\n\" + i);t.b(\" *\");t.b(\"\\n\" + i);t.b(\" * Vertex Shader: texture\");t.b(\"\\n\" + i);t.b(\" *\");t.b(\"\\n\" + i);t.b(\" * This shader expects a 3D vertex position plus a 2D texture coordinate\");t.b(\"\\n\" + i);t.b(\" * vertexTexCoords per vertex, and passes the texture coordinate through\");t.b(\"\\n\" + i);t.b(\" * to the fragment shader using the varying texCoords.\");t.b(\"\\n\" + i);t.b(\" *\");t.b(\"\\n\" + i);t.b(\" */\");t.b(\"\\n\" + i);t.b(\" \");t.b(\"\\n\" + i);t.b(\"#version 100\");t.b(\"\\n\" + i);t.b(\"precision mediump float;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"attribute vec3 vertexPosition;\");t.b(\"\\n\" + i);t.b(\"attribute vec2 vertexTexCoords;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"// uniform mat4 modelViewMatrix;\");t.b(\"\\n\" + i);t.b(\"uniform mat4 projectionMatrix;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"varying vec2 texCoords;\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"void main() {\");t.b(\"\\n\" + i);t.b(\"\tgl_Position = projectionMatrix *\");t.b(\"\\n\" + i);t.b(\"\t\t\t\t  // modelViewMatrix *\");t.b(\"\\n\" + i);t.b(\"\t\t\t\t  vec4(vertexPosition, 1.0);\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"\ttexCoords = vertexTexCoords;\");t.b(\"\\n\" + i);t.b(\"}\");t.b(\"\\n\");return t.fl(); },partials: {}, subs: {  }}, \"\", hogan);  function render(){ return tmpl.render.apply(tmpl, arguments); } render.template = tmpl; return render;});\n\n","/*\n * WebGL core teaching framwork \n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: Scene\n *\n * This module defines the scene to be drawn.\n *\n * A Scene object has a draw() method to draw itself, plus some\n * public attributes that may be used by animation functions etc:\n *\n * Scene.world:       the root node of the scene, of type SceneNode\n *\n * Scene.camera:      the camera to be used, consisting of two attributes:\n *                    camera.viewMatrix and camera.projectionMatrix.\n *\n */\n\n/**\n * @author Hartmut Schirmacher, hschirmacher.beuth-hochschule.de\n * @author Niels Garve, niels.garve.yahoo.de\n */\ndefine('scene',[\n    'gl-matrix',\n    'program',\n    'scene_node',\n    'texture',\n    'light',\n    'material',\n    'stage',\n    'mesh',\n    'Config',\n    'hgn!../shaders/pathtracing.vert',\n    'hgn!../shaders/pathtracing.frag',\n    'hgn!../shaders/texture.vert',\n    'hgn!../shaders/texture.frag'\n], function(glmatrix, Program, SceneNode, Texture, light, material, Stage, Mesh, Config, pathtracingVert, pathtracingFrag, textureVert, textureFrag) {\n\n    'use strict';\n\n    /**\n     * Initialisiert die zu prog gehörenden uniform Variablen, die die Szene definieren. !!!Achtung: Lichter sind\n     * auch Objekte. Sie werden dem Shader immer zu Beginn(!) der entsprechenden Reihung übergeben!!!\n     *\n     * @param prog\n     * @author Niels Garve, niels.garve.yahoo.de\n     * @private\n     */\n    function setUniformScene(prog) {\n        prog.setUniform('La', 'vec3', [0.1, 0.1, 0.1]);\n\n        /*\n         * spheres\n         */\n        prog.setUniform('spheres[0].center', 'vec3', [-20, 60, -30]);\n        prog.setUniform('spheres[0].radius', 'float', 7.5);\n        prog.setUniform('sphereMaterials[0].isPerfectMirror', 'bool', false);\n        prog.setUniform('sphereMaterials[0].isDiffuse', 'bool', false);\n        prog.setUniform('sphereMaterials[0].Le', 'vec3', [1, 1, 1]);\n        prog.setUniform('sphereMaterials[0].Kd', 'vec3', [1, 1, 1]);\n\n        prog.setUniform('spheres[1].center', 'vec3', [0, 85, 85]);\n        prog.setUniform('spheres[1].radius', 'float', 35);\n        prog.setUniform('sphereMaterials[1].isPerfectMirror', 'bool', false);\n        prog.setUniform('sphereMaterials[1].isDiffuse', 'bool', false);\n        prog.setUniform('sphereMaterials[1].Le', 'vec3', [0.66, 0.66, 0.66]);\n        prog.setUniform('sphereMaterials[1].Kd', 'vec3', [1, 1, 1]);\n\n        /*\n         * the mesh, matrial only\n         */\n        prog.setUniform('meshMaterial.isPerfectMirror', 'bool', false);\n        prog.setUniform('meshMaterial.isDiffuse', 'bool', true);\n        prog.setUniform('meshMaterial.Le', 'vec3', [0.0, 0.0, 0.0]);\n        prog.setUniform('meshMaterial.Kd', 'vec3', [1.0, 1.0, 1.0]);\n\n        /*\n         * Cornell Box (128 x 128 x 48)\n         */\n        /*\n         var minCorner = [-64, -1, -16], // [x, y, z]\n         maxCorner = [64, 127, 32]; // [x, y, z]\n\n         prog.setUniform('cornellBox.minCorner', 'vec3', minCorner);\n         prog.setUniform('cornellBox.maxCorner', 'vec3', maxCorner);\n\n         // left\n         prog.setUniform('cornellBox.planes[0].n', 'vec3', [1, 0, 0]);\n         prog.setUniform('cornellBox.planes[0].d', 'float', minCorner[0]); // x\n         prog.setUniform('cornellBox.materials[0].isPerfectMirror', 'bool', false);\n         prog.setUniform('cornellBox.materials[0].isDiffuse', 'bool', true);\n         prog.setUniform('cornellBox.materials[0].Le', 'vec3', [0.0, 0.0, 0.0]);\n         prog.setUniform('cornellBox.materials[0].Kd', 'vec3', [0.4, 0.0, 0.0]);\n\n         // right\n         prog.setUniform('cornellBox.planes[1].n', 'vec3', [-1, 0, 0]);\n         prog.setUniform('cornellBox.planes[1].d', 'float', -maxCorner[0]); // x\n         prog.setUniform('cornellBox.materials[1].isPerfectMirror', 'bool', false);\n         prog.setUniform('cornellBox.materials[1].isDiffuse', 'bool', true);\n         prog.setUniform('cornellBox.materials[1].Le', 'vec3', [0.0, 0.0, 0.0]);\n         prog.setUniform('cornellBox.materials[1].Kd', 'vec3', [0.0, 0.4, 0.0]);\n\n         // near\n         prog.setUniform('cornellBox.planes[2].n', 'vec3', [0, 1, 0]);\n         prog.setUniform('cornellBox.planes[2].d', 'float', minCorner[1]); // y\n         prog.setUniform('cornellBox.materials[2].isPerfectMirror', 'bool', false);\n         prog.setUniform('cornellBox.materials[2].isDiffuse', 'bool', true);\n         prog.setUniform('cornellBox.materials[2].Le', 'vec3', [0.0, 0.0, 0.0]);\n         prog.setUniform('cornellBox.materials[2].Kd', 'vec3', [0.8, 0.8, 0.8]);\n\n         // far\n         prog.setUniform('cornellBox.planes[3].n', 'vec3', [0, -1, 0]);\n         prog.setUniform('cornellBox.planes[3].d', 'float', -maxCorner[1]); // y\n         prog.setUniform('cornellBox.materials[3].isPerfectMirror', 'bool', false);\n         prog.setUniform('cornellBox.materials[3].isDiffuse', 'bool', true);\n         prog.setUniform('cornellBox.materials[3].Le', 'vec3', [0.0, 0.0, 0.0]);\n         prog.setUniform('cornellBox.materials[3].Kd', 'vec3', [0.8, 0.8, 0.8]);\n\n         // bottom\n         prog.setUniform('cornellBox.planes[4].n', 'vec3', [0, 0, 1]);\n         prog.setUniform('cornellBox.planes[4].d', 'float', minCorner[2]); // z\n         prog.setUniform('cornellBox.materials[4].isPerfectMirror', 'bool', false);\n         prog.setUniform('cornellBox.materials[4].isDiffuse', 'bool', true);\n         prog.setUniform('cornellBox.materials[4].Le', 'vec3', [0.0, 0.0, 0.0]);\n         prog.setUniform('cornellBox.materials[4].Kd', 'vec3', [0.2, 0.2, 0.2]);\n\n         // top\n         prog.setUniform('cornellBox.planes[5].n', 'vec3', [0, 0, -1]);\n         prog.setUniform('cornellBox.planes[5].d', 'float', -maxCorner[2]); // z\n         prog.setUniform('cornellBox.materials[5].isPerfectMirror', 'bool', false);\n         prog.setUniform('cornellBox.materials[5].isDiffuse', 'bool', false);\n         prog.setUniform('cornellBox.materials[5].Le', 'vec3', [0.4, 0.4, 0.4]);\n         prog.setUniform('cornellBox.materials[5].Kd', 'vec3', [1.0, 1.0, 1.0]); // Lichtfarbe\n         */\n    }\n\n    /**\n     * Füllt die Textur folgendermaßen:\n     *  ----------------------------------------------------s\n     * | Face_1  (a, b, c) ... Face_samplerWidth  (a, b, c)\n     * | Vertex_1(x, y, z) ... Vertex_samplerWidth(x, y, z)\n     * | Normal_1(x, y, z) ... Normal_samplerWidth(x, y, z)\n     * t\n     *\n     * Das spart teure Adressierung im Shader: jedem Array gehört eine Zeile in der Textur. Die Indizes stimmen!\n     * Außerdem lässt die aktuelle Implementierung nur maximal 256 Vertizes zu, da sonst das eine Byte pro Index\n     * \"gesprengt\" wird. Eine Zeile sollte also erstmal reichen.\n     *\n     * @param mesh\n     * @param samplerWidth\n     * @param samplerHeight\n     * @returns {Uint8Array}\n     * @author Niels Garve, niels.garve.yahoo.de\n     * @private\n     */\n    function meshToUint8Array(mesh, samplerWidth, samplerHeight) {\n        if(!mesh.indices || !mesh.vertices || !mesh.vertexNormals) {\n            throw new Error('bad parameter: mesh');\n        }\n\n        if(mesh.indices.length > 3 * samplerWidth ||\n            mesh.vertices.length > 3 * samplerWidth ||\n            mesh.vertexNormals.length > 3 * samplerWidth ||\n            samplerHeight < 3) {\n            throw new Error(\"mesh doesn't fit the sampler\");\n        }\n\n        var res = new Uint8Array(samplerWidth * samplerHeight * 3),\n            i, j, k;\n\n        for (i = 0; i < mesh.indices.length; i++) {\n            res[i] = mesh.indices[i];\n        }\n\n        for (j = 0; j < mesh.vertices.length; j++) {\n            res[3 * samplerWidth + j] = mesh.vertices[j];\n        }\n\n        for (k = 0; k < mesh.vertexNormals.length; k++) {\n            res[6 * samplerWidth + k] = mesh.vertexNormals[k] * 127; // Rundungsfehler verringern\n        }\n\n        return res;\n    }\n\n    /**\n     * a simple scene is an object with a few objects and a draw() method\n     *\n     * @param gl\n     * @author Hartmut Schirmacher, hschirmacher.beuth-hochschule.de\n     * @author Niels Garve, niels.garve.yahoo.de\n     * @constructor\n     */\n    var Scene = function(gl) {\n        // store the WebGL rendering context\n        this.gl = gl;\n\n        // vars\n        var config = new Config(),\n            MESH_SAMPLER_WIDTH = config.get('MESH_SAMPLER_WIDTH'),\n            MESH_SAMPLER_HEIGHT = config.get('MESH_SAMPLER_HEIGHT'),\n            canvas = gl.canvas,\n            mesh = new Mesh(document.getElementById('mesh').innerHTML),\n            meshData = meshToUint8Array(mesh, MESH_SAMPLER_WIDTH, MESH_SAMPLER_HEIGHT); // zum Laden in eine Textur\n\n        // 1. initialisiere framebuffer\n        this.framebuffer = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n        this.framebuffer.width = canvas.width;\n        this.framebuffer.height = canvas.height;\n\n        // 2. initialisiere textures\n        var swapTexture = new Texture.Texture2D(gl).init_2(this.framebuffer.width, this.framebuffer.height, null),\n            meshTexture = new Texture.Texture2D(gl).init_2(MESH_SAMPLER_WIDTH, MESH_SAMPLER_HEIGHT, meshData);\n\n        swapTexture.setTexParameter(gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        swapTexture.setTexParameter(gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        meshTexture.setTexParameter(gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        meshTexture.setTexParameter(gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // 3. initialisiere evtl. framebufferTexture\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, swapTexture.glTextureObject(), 0);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        // 4. initialisiere camera\n        this.camera = {};\n        this.camera.viewMatrix = glmatrix.mat4.lookAt(glmatrix.mat4.create(), [0, 0, 0], [-0.2, 1, -0.6], [0, 0, 1]); // eye, center, up\n        // set up the projection matrix: orthographic projection, aspect ratio: 1:1\n        this.camera.projectionMatrix = glmatrix.mat4.ortho(glmatrix.mat4.create(), -1, 1, -1, 1, 0.01, 100);\n\n        // 5. initialisiere WebGL programs\n        this.prog_pathtracing = new Program(gl,\n            pathtracingVert({}),\n            pathtracingFrag({\n                hasSpheres: true,\n                numberOfSpheres: 2,\n                numberOfSphericalLights: 2,\n                hasCornellBox: false,\n                hasMesh: true,\n                meshSamplerWidth: config.get('MESH_SAMPLER_WIDTH')\n            })\n        );\n\n        this.prog_texture = new Program(gl,\n            textureVert({}),\n            textureFrag({})\n        );\n\n        this.prog_texture.use();\n        this.prog_texture.setUniform('projectionMatrix', 'mat4', this.camera.projectionMatrix);\n        this.prog_texture.setTexture('texture0', 0, swapTexture);\n\n        this.prog_pathtracing.use();\n        this.prog_pathtracing.setUniform('projectionMatrix', 'mat4', this.camera.projectionMatrix);\n        this.prog_pathtracing.setTexture('texture0', 0, swapTexture);\n        this.prog_pathtracing.setTexture('mesh.data', 1, meshTexture);\n        this.prog_pathtracing.setUniform('mesh.onePixel', 'vec2', [1 / MESH_SAMPLER_WIDTH, 1 / MESH_SAMPLER_HEIGHT]);\n        this.prog_pathtracing.setUniform('eyePosition', 'vec3', [0, 0, 0]); // eye\n        setUniformScene(this.prog_pathtracing);\n\n        // 6. create some objects to be drawn\n        this.stage = new Stage(gl);\n        this.stageNode = new SceneNode('StageNode', [this.stage], null); // program to null, it changes while drawing\n        // the world node - this is potentially going to be accessed from outside\n        this.world = new SceneNode('world', [this.stageNode], null);\n\n        this.sampleCounter = 0;\n    }; // Scene constructor\n\n    /**\n     * draw the scene, starting at the root node\n     *\n     * @param msSinceStart\n     * @author Hartmut Schirmacher, hschirmacher.beuth-hochschule.de\n     * @author Niels Garve, niels.garve.yahoo.de\n     */\n    Scene.prototype.draw = function(msSinceStart) {\n        // shortcut\n        var gl = this.gl;\n\n        this.prog_pathtracing.use();\n        this.prog_pathtracing.setUniform('secondsSinceStart', 'float', msSinceStart * 0.001); // vgl. Evan Wallace\n        this.prog_pathtracing.setUniform('textureWeight', 'float', this.sampleCounter / (this.sampleCounter + 1)); // vgl. Evan Wallace\n\n        // initially set model-view matrix to the camera's view matrix\n        var modelView = this.camera.viewMatrix;\n\n        // enable depth testing, keep fragments with smaller depth values\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthFunc(gl.LESS);\n\n        // clear color and depth buffers\n        gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        // start drawing with the root node\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n        this.world.draw(gl, this.prog_pathtracing, modelView);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        this.world.draw(gl, this.prog_texture, modelView);\n\n        this.sampleCounter++;\n    }; // Scene draw()\n\n    return Scene;\n}); // define module\n        \n\n;\n","/*\n *\n * WebGL Core Teaching Framework\n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: Animation\n *\n * An Animation object allows to start/stop/continue an animation loop\n * in which a user-provided callback function is called.\n *\n */\n\n/* requireJS module definition */\ndefine('animation',[\n], function() {\n\n    \"use strict\";\n\n    /*\n     * The code below this comment is:\n     * Copyright 2010, Google Inc.\n     * All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are\n     * met:\n     *\n     *     * Redistributions of source code must retain the above copyright\n     * notice, this list of conditions and the following disclaimer.\n     *     * Redistributions in binary form must reproduce the above\n     * copyright notice, this list of conditions and the following disclaimer\n     * in the documentation and/or other materials provided with the\n     * distribution.\n     *     * Neither the name of Google Inc. nor the names of its\n     * contributors may be used to endorse or promote products derived from\n     * this software without specific prior written permission.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n     * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n     * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n     * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     */\n\n    /**\n     * Provides requestAnimationFrame in a cross browser way.\n     * (C)opyright 2010, Google Inc.\n     */\n    window.requestAnimFrame = (function() {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n                return window.setTimeout(callback, 1000 / 60);\n            };\n    })();\n\n    /**\n     * Provides cancelRequestAnimationFrame in a cross browser way.\n     * (C)opyright 2010, Google Inc.\n     */\n    window.cancelRequestAnimFrame = (function() {\n        return window.cancelCancelRequestAnimationFrame ||\n            window.webkitCancelRequestAnimationFrame ||\n            window.mozCancelRequestAnimationFrame ||\n            window.oCancelRequestAnimationFrame ||\n            window.msCancelRequestAnimationFrame ||\n            window.clearTimeout;\n    })();\n\n    /*\n\n       Animation object allows to start/stop/continue an animation loop\n       in which a user-provided callback function is called.\n       \n       The user-provided callback function can accept up to two parameters:\n       - the total time elapsed since start() of the animation \n       - the \"delta\" time elapsed since the last call to the update function\n       \n       Arguments to the constructor:\n       - updateFunction: function(totalElapsedTime, timeSinceLastCall)\n       \n       Methods:\n       - start()    starts the animation and resets the timer\n       - stop()     stops the animation\n       - resume() continues the animation after a stop() event. \n       \n    */\n       \n    var Animation = function(updateFunction, startNow) {\n\n        // store callback function\n        this.updateFunction = updateFunction;\n        \n        // time when the animation was played the first time\n        this.firstTime = 0;\n        \n        // the last known time the animation was called\n        this.lastTime = 0;\n        \n        // the time the animation was paused\n        this.waitingTime = 0;\n        \n        // flag to signal whether the animation is started or stopped\n        if(startNow) {\n            this.start();\n        } else {\n            this.stop();\n        };\n\n    }; \n\n    // query animation status\n    Animation.prototype.isRunning = function() {\n        return !this.isStopped;\n    };\n    \n    // start a new animation loop with time = 0\n    Animation.prototype.start = function() {\n        this.firstTime   = 0;\n        this.lastTime    = 0;\n        this.waitingTime = 0;\n        this.isStopped   = false;\n        this.update();\n    };\n    \n    // pause / stop the animation\n    Animation.prototype.stop = function() {\n        this.isStopped = true;\n    };\n    \n    // continue after a pause/stop:\n    // - the total elapsed time is calculated relative to the \n    //   original start time\n    // - the time \"delta\" will start with 0 again\n    Animation.prototype.resume = function() {\n        if(this.lastTime == 0) {\n            // first time? then init firstTime and lastTime\n            this.firstTime = new Date().getTime();\n            this.lastTime  = new Date().getTime();\n        } else {\n            // continuation? then just update the waiting time\n            var delta = new Date().getTime() - this.lastTime;\n            this.waitingTime += delta;\n            this.lastTime    += delta; \n        };\n        this.isStopped = false;\n        this.update();\n    };\n    \n    // toggle animation on/off\n    Animation.prototype.toggleAnimation = function() {\n        if(this.isRunning()) \n            this.stop();\n        else \n            this.resume();\n    };\n\n    // update() is called regularly; it calculates the elapsed time\n    //   and then calls the update function provided by the user\n    Animation.prototype.update = function() {\n    \n        // only do something if animation is not stopped:\n        if(!this.isRunning()) {\n            return;\n        };\n            \n        // calculate elapsed time, remember current time\n        var timeNow = new Date().getTime();\n        var totalTime = timeNow - this.firstTime - this.waitingTime;\n        var timeDelta = timeNow - this.lastTime;\n        this.lastTime = timeNow;\n        \n        // register animation callback\n        var _animation = this; // pass animation object via closure\n        requestAnimFrame( (function() {_animation.update();}) );\n            \n        // call the actual update function\n        this.updateFunction(totalTime, timeDelta);\n\n    };\n    \n    // this module returns only the Animation constructor function\n    return Animation;        \n\n}); // define\n\n\n;\n","/*\n * JavaScript / Canvas teaching framwork \n * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de \n *\n * Module: Scene Explorer\n * \n * The scene explorer handles key and mouse events in the canvas \n * in order to allow interactive exploration of the scene.\n *\n * It can also manipulate a second scene (in a second canvas) in sync.\n *\n */\n\n\n/* requireJS module definition */\ndefine('scene_explorer',[\n    \"gl-matrix\"\n], function(glmatrix) {\n\n    \"use strict\";\n\n    /* \n\n        Object that handles mouse / keyboard interactions and \n        uses them to manipulate the scene's world transformation\n        to allow interactive exploration.\n        \n        Parameters to the constructor:\n        - canvas triggering the keyboard/mouse events \n        - flag indicating whether or not the explorer should\n          trigger redrawing of the scene (switch off if you are\n          using an animation / simulation loop)\n        - scene drawn in that canvas, must have a draw() method\n        - optional second scene to be manipulated in sync\n        \n    */\n\n    var SceneExplorer = function(canvas, triggerRedraw, scene, scene2) {\n\n        // the canvas to which this object is attached\n        this.canvas = canvas;\n        \n        // should the explorer trigger redrawing of the scene?\n        this.triggerRedraw = triggerRedraw;\n        \n        // the scene to be manipulated\n        this.scene = scene;\n        this.scene2 = scene2;\n        \n        // the scene's camera\n        this.camera = scene.camera;\n        \n        // the current mouse dragging mode\n        this.dragMode = \"rotation\";\n        // has the dragging operation started yet?\n        this.draggingStarted = false;\n        // the last known positions of the mouse\n        this.startX = 0;\n        this.startY = 0;\n\n        // the currently active modifier keys (Shift, Ctrl, Alt)\n        this.KEY_NONE  = 0;\n        this.KEY_SHIFT = 1;\n        this.KEY_ALT   = 2;\n        this.KEY_CTRL  = 4;\n        this.KEY_META  = 8;\n        this.KEY_ALL   = 1+2+4+8;\n        this.activeModifierKeys = this.KEY_NONE;\n        \n        // mouse sensitivities for rotation and zoom operations\n        this.rotSensitivity = 0.01;\n        this.zoomSensitivity = 0.01;\n        this.transSensitivity = 0.01;\n        \n        // constructor attaches explorer to the specified canvas\n        this.attachToCanvas(this.canvas);\n    \n    }; // SceneExplorer \n     \n    // function to start a mouse drag operation\n    // dragType: \"rotate\", \"translate\", \"zoom\"\n    SceneExplorer.prototype.startDragging = function(x, y, dragType) {\n    \n        //log(\"start dragging at \" + x + \",\" + y);\n        \n        this.startX = x;\n        this.startY = y;\n        if(dragType) {\n            this.dragMode = dragType;\n        };\n        this.draggingStarted = true;\n            \n    };\n   \n    // stop the dragging operation after it was started with startDragging()\n    // return values:\n    // - true: a redraw is recommended\n    // - false: no redraw necessary\n    SceneExplorer.prototype.stopDragging = function(x,y) {\n        \n        // first make sure that all events have been processed\n        var result = this.continueDragging(x,y);\n    \n        // end of dragging operation\n        this.draggingStarted = false;\n        \n        return result;\n    \n    };\n        \n  \n    // function to update a drag operation, i.e. while the mouse is moved \n    //   and a mouse button is pressed down\n    // return values:\n    // - true: a redraw is recommended\n    // - false: no redraw necessary\n    SceneExplorer.prototype.continueDragging = function(x, y) {\n    \n        if(x==undefined || y==undefined) {\n            return false;\n        };\n\n        // if we haven't started any operation, ignore mouse move\n        if(!this.draggingStarted) \n            return false;\n    \n        // calculate the mouse distance \n        var deltaX = x - this.startX;\n        var deltaY = y - this.startY;\n        \n        // remember the new mouse position\n        this.startX = x;\n        this.startY = y;\n        \n        // if virtually no mouse movement, skip the calculations\n        if(Math.abs(deltaX) < 2 && Math.abs(deltaY) < 2) \n            return false;\n        \n        if(this.dragMode == \"rotate\") {\n        \n            // rotate the scene's world node, not the camera\n            \n            // scale values according to mouse sensitivity\n            var degreesY = deltaX * this.rotSensitivity;\n            var degreesX = deltaY * this.rotSensitivity;\n            \n            // camera system x and y axes \n            var xAxis = glmatrix.vec3.fromValues(1, 0, 0);\n            var yAxis = glmatrix.vec3.fromValues(0, 1, 0);\n            \n            // transformation from camera coords to model coords\n            var eyeToModel = glmatrix.mat4.invert(glmatrix.mat4.create(), this.camera.viewMatrix);\n            \n            // eliminate translation component of matrix\n            eyeToModel[12] = 0; eyeToModel[13] = 0; eyeToModel[14] = 0;\n            \n            // transform axes into model space\n            var rotX = glmatrix.mat4.create();\n            var rotY = glmatrix.mat4.create();\n\n            glmatrix.vec3.transformMat4(xAxis, xAxis, eyeToModel);\n            glmatrix.vec3.transformMat4(yAxis, yAxis, eyeToModel);\n\n            glmatrix.mat4.rotate(rotX,rotX,degreesX,xAxis);\n            glmatrix.mat4.rotate(rotY,rotY,degreesY,yAxis);\n            \n            // log(\"rotate \"+degreesX+\" degrees around \" + xAxis);\n            \n            // add to model-view transformation chain from the right\n            glmatrix.mat4.multiply(this.scene.world.transformation, rotX, this.scene.world.transformation);\n            glmatrix.mat4.multiply(this.scene.world.transformation, rotY, this.scene.world.transformation);\n            \n        } else if(this.dragMode == \"translateXY\") {\n\n            // translation vector in eye coords\n            var trans = vec3.create([deltaX*this.transSensitivity, -deltaY*this.transSensitivity, 0]);\n            mat4.translate(this.scene.camera.viewMatrix, trans);\n            \n        } else if(this.dragMode == \"translateZ\") {\n\n            // translation vector in eye coords\n            var trans = vec3.create([0, 0, -deltaY*this.zoomSensitivity]);\n            mat4.translate(this.scene.camera.viewMatrix, trans);\n            \n        };\n        \n        // we we have a second scene attached, copy the matrices over\n        if(this.scene2 != undefined) {\n            this.scene2.world.transformation = mat4.create(this.scene.world.transformation);\n            this.scene2.camera.viewMatrix = mat4.create(this.scene.camera.viewMatrix);\n        };\n\n        // the scene should be redrawn eventually\n        return true;\n        \n    };\n    \n    // method to redraw all affected scenes\n    SceneExplorer.prototype.redraw = function() {\n        /**\n         * reset sampleCounter\n         * @author Niels Garve, niels.garve.yahoo.de\n         * @type {number}\n         */\n        this.scene.sampleCounter = 0;\n\n        // only redraw if this is desired at all\n        if(!this.triggerRedraw)\n            return;\n            \n        // redraw main scene\n        this.scene.draw();\n        \n        // redraw optional second scene in sync\n        if(this.scene2 != undefined) \n            this.scene2.draw();\n    };\n    \n    // attach a scene explorer to the mouse events of a specific canvas\n    // this means that the canvas's event handlers will be set to \n    // call the respective functions of the SceneExplorer\n    SceneExplorer.prototype.attachToCanvas = function(canvas) {\n\n        // install hook into this object within the canvas (for mouse events)\n        var _explorer = this;\n        \n        // event handler for \"mouse down\": this is where the mouse \n        // button bindings are defined\n        canvas.mouseDown = function(event) {\n        \n            // shortcut to the explorer object stored in the closure\n            var exp = _explorer;\n        \n            // log(\"mouse down!\");\n            var button = \"unknown\";\n            \n            // translate mouse button events depending on browser\n            // see \"Javascrip Madness: Key Events\", \n            // http://unixpapa.com/js/key.html\n            if(!event.which) {\n                // Micrsosoft/IE buttons \n                if(event.button & 4) button = \"middle\";\n                if(event.button & 2) button = \"right\";\n                if(event.button & 1) button = \"left\";\n            } else {\n                // rest of the world\n                if(event.which == 3) button = \"right\";\n                if(event.which == 2) button = \"middle\";\n                if(event.which == 1) button = \"left\";\n            };\n            \n            if(button == \"left\") {\n            \n                if(exp.activeModifierKeys == exp.KEY_NONE)\n                    exp.startDragging(event.clientX, event.clientY, \"rotate\");\n                else if(exp.activeModifierKeys == exp.KEY_SHIFT)\n                    exp.startDragging(event.clientX, event.clientY, \"translateXY\");\n                else if(exp.activeModifierKeys == exp.KEY_ALT)\n                    exp.startDragging(event.clientX, event.clientY, \"translateZ\");\n                    \n            } else if(button == \"right\") {\n                exp.startDragging(event.clientX, event.clientY, \"translateXY\");\n            } else if(button == \"middle\") {\n                exp.startDragging(event.clientX, event.clientY, \"translateZ\");\n            } else {\n                log(\"could not recognize mouse button!\");\n            };\n        };\n    \n        // event handler for \"mouse up\"\n        canvas.mouseUp = function(event) {\n        \n            // shortcut to the explorer object stored in the closure\n            var exp = _explorer;\n            \n            if(exp.stopDragging(event.clientX, event.clientY))\n                exp.redraw();\n        };\n    \n        // event handler for \"mouse move\"\n        canvas.mouseMove = function(event) {\n\n            // shortcut to the explorer object stored in the closure\n            var exp = _explorer;\n            \n            if(exp.continueDragging(event.clientX, event.clientY))\n                exp.redraw();\n        };\n        \n        // event handler for \"key pressed down\"\n        canvas.keyDown = function(event) {\n\n            // shortcut to the explorer object stored in the closure\n            var exp = _explorer;\n            \n            // first process any pending events with the previously\n            // pressed modifier keys still active\n            if(exp.draggingStarted) \n                if(exp.stopDragging(event.clientX, event.clientY))\n                    exp.redraw();\n            \n            // see \"Javascrip Madness: Key Events\", \n            // http://unixpapa.com/js/key.html\n\n            // now change the currently active modifier keys\n            exp.activeModifierKeys = exp.KEY_NONE;\n            if(event.shiftKey) exp.activeModifierKeys += exp.KEY_SHIFT;\n            if(event.ctrlKey)  exp.activeModifierKeys += exp.KEY_CTRL;\n            if(event.altKey)   exp.activeModifierKeys += exp.KEY_ALT;\n            if(event.metaKey)  exp.activeModifierKeys += exp.KEY_META;\n            //log(\"key down, mods=\"+exp.activeModifierKeys);\n        };\n        \n        \n        // event handler for \"key is being released\"\n        canvas.keyUp = function(event) {\n\n            // shortcut to the explorer object stored in the closure\n            var exp = _explorer;\n            \n            // first process any pending events with the previously\n            // pressed modifier keys still active\n            if(exp.draggingStarted) \n                if(exp.stopDragging(event.clientX, event.clientY))\n                    exp.redraw();\n            \n            // see \"Javascrip Madness: Key Events\", \n            // http://unixpapa.com/js/key.html\n\n            // now change the currently active modifier keys\n            exp.activeModifierKeys = exp.KEY_NONE;\n            if(event.shiftKey) exp.activeModifierKeys += exp.KEY_SHIFT;\n            if(event.ctrlKey)  exp.activeModifierKeys += exp.KEY_CTRL;\n            if(event.altKey)   exp.activeModifierKeys += exp.KEY_ALT;\n            if(event.metaKey)  exp.activeModifierKeys += exp.KEY_META;\n            //log(\"key up, mods=\"+exp.activeModifierKeys);\n        };\n        \n                \n        // install event handlers\n        canvas.onmousedown=canvas.mouseDown;\n\t    canvas.onmouseup=canvas.mouseUp;\n\t    canvas.onmousemove=canvas.mouseMove;  \n\t    window.document.onkeydown=canvas.keyDown;  \n\t    window.document.onkeyup=canvas.keyUp;  \n    \n    }; // SceneExplorer.attachToCanvas()\n    \n\n    // this module only returns the SceneExplorer constructor function\n    return SceneExplorer;\n\n}); // define module\n;\n","/**\n * @author Niels Garve, niels.garve.yahoo.de\n */\ndefine('main',[\n    'gl-matrix',\n    'scene',\n    'animation',\n    'scene_explorer'\n], function(glmatrix, Scene, Animation, SceneExplorer) {\n\n    'use strict';\n\n    // TODO Config\n    glmatrix.glMatrix.setMatrixArrayType(Float32Array);\n\n    var Raymond = function(gl) {\n        this.scene = new Scene(gl);\n\n        // TODO create an animation for timing and regular calls of Scene.draw()\n        this.animation = new Animation(function(t) {\n            this.scene.draw(t);\n        }.bind(this)); // do not start yet\n\n        new SceneExplorer(gl.canvas, false, this.scene);\n    };\n\n    Raymond.prototype.drawFirstFrame = function() {\n        this.scene.draw(0.0);\n    };\n\n    Raymond.prototype.start = function() {\n        this.scene.sampleCounter = 0;\n        this.animation.start();\n    };\n\n    Raymond.prototype.stop = function() {\n        this.animation.stop();\n    };\n\n    Raymond.prototype.resume = function() {\n        this.animation.resume();\n    };\n\n    return Raymond;\n});\n"]}